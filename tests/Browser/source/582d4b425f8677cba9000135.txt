<html class="dark"><head><style type="text/css">.swal-icon--error{border-color:#f27474;-webkit-animation:animateErrorIcon .5s;animation:animateErrorIcon .5s}.swal-icon--error__x-mark{position:relative;display:block;-webkit-animation:animateXMark .5s;animation:animateXMark .5s}.swal-icon--error__line{position:absolute;height:5px;width:47px;background-color:#f27474;display:block;top:37px;border-radius:2px}.swal-icon--error__line--left{-webkit-transform:rotate(45deg);transform:rotate(45deg);left:17px}.swal-icon--error__line--right{-webkit-transform:rotate(-45deg);transform:rotate(-45deg);right:16px}@-webkit-keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@keyframes animateErrorIcon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}to{-webkit-transform:rotateX(0deg);transform:rotateX(0deg);opacity:1}}@-webkit-keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}@keyframes animateXMark{0%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}50%{-webkit-transform:scale(.4);transform:scale(.4);margin-top:26px;opacity:0}80%{-webkit-transform:scale(1.15);transform:scale(1.15);margin-top:-6px}to{-webkit-transform:scale(1);transform:scale(1);margin-top:0;opacity:1}}.swal-icon--warning{border-color:#f8bb86;-webkit-animation:pulseWarning .75s infinite alternate;animation:pulseWarning .75s infinite alternate}.swal-icon--warning__body{width:5px;height:47px;top:10px;border-radius:2px;margin-left:-2px}.swal-icon--warning__body,.swal-icon--warning__dot{position:absolute;left:50%;background-color:#f8bb86}.swal-icon--warning__dot{width:7px;height:7px;border-radius:50%;margin-left:-4px;bottom:-11px}@-webkit-keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}@keyframes pulseWarning{0%{border-color:#f8d486}to{border-color:#f8bb86}}.swal-icon--success{border-color:#a5dc86}.swal-icon--success:after,.swal-icon--success:before{content:"";border-radius:50%;position:absolute;width:60px;height:120px;background:#fff;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal-icon--success:before{border-radius:120px 0 0 120px;top:-7px;left:-33px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:60px 60px;transform-origin:60px 60px}.swal-icon--success:after{border-radius:0 120px 120px 0;top:-11px;left:30px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:0 60px;transform-origin:0 60px;-webkit-animation:rotatePlaceholder 4.25s ease-in;animation:rotatePlaceholder 4.25s ease-in}.swal-icon--success__ring{width:80px;height:80px;border:4px solid hsla(98,55%,69%,.2);border-radius:50%;box-sizing:content-box;position:absolute;left:-4px;top:-4px;z-index:2}.swal-icon--success__hide-corners{width:5px;height:90px;background-color:#fff;padding:1px;position:absolute;left:28px;top:8px;z-index:1;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal-icon--success__line{height:5px;background-color:#a5dc86;display:block;border-radius:2px;position:absolute;z-index:2}.swal-icon--success__line--tip{width:25px;left:14px;top:46px;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-animation:animateSuccessTip .75s;animation:animateSuccessTip .75s}.swal-icon--success__line--long{width:47px;right:8px;top:38px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-animation:animateSuccessLong .75s;animation:animateSuccessLong .75s}@-webkit-keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@keyframes rotatePlaceholder{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}to{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@-webkit-keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@keyframes animateSuccessTip{0%{width:0;left:1px;top:19px}54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@-webkit-keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@keyframes animateSuccessLong{0%{width:0;right:46px;top:54px}65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}.swal-icon--info{border-color:#c9dae1}.swal-icon--info:before{width:5px;height:29px;bottom:17px;border-radius:2px;margin-left:-2px}.swal-icon--info:after,.swal-icon--info:before{content:"";position:absolute;left:50%;background-color:#c9dae1}.swal-icon--info:after{width:7px;height:7px;border-radius:50%;margin-left:-3px;top:19px}.swal-icon{width:80px;height:80px;border-width:4px;border-style:solid;border-radius:50%;padding:0;position:relative;box-sizing:content-box;margin:20px auto}.swal-icon:first-child{margin-top:32px}.swal-icon--custom{width:auto;height:auto;max-width:100%;border:none;border-radius:0}.swal-icon img{max-width:100%;max-height:100%}.swal-title{color:rgba(0,0,0,.65);font-weight:600;text-transform:none;position:relative;display:block;padding:13px 16px;font-size:27px;line-height:normal;text-align:center;margin-bottom:0}.swal-title:first-child{margin-top:26px}.swal-title:not(:first-child){padding-bottom:0}.swal-title:not(:last-child){margin-bottom:13px}.swal-text{font-size:16px;position:relative;float:none;line-height:normal;vertical-align:top;text-align:left;display:inline-block;margin:0;padding:0 10px;font-weight:400;color:rgba(0,0,0,.64);max-width:calc(100% - 20px);overflow-wrap:break-word;box-sizing:border-box}.swal-text:first-child{margin-top:45px}.swal-text:last-child{margin-bottom:45px}.swal-footer{text-align:right;padding-top:13px;margin-top:13px;padding:13px 16px;border-radius:inherit;border-top-left-radius:0;border-top-right-radius:0}.swal-button-container{margin:5px;display:inline-block;position:relative}.swal-button{background-color:#7cd1f9;color:#fff;border:none;box-shadow:none;border-radius:5px;font-weight:600;font-size:14px;padding:10px 24px;margin:0;cursor:pointer}.swal-button:not([disabled]):hover{background-color:#78cbf2}.swal-button:active{background-color:#70bce0}.swal-button:focus{outline:none;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(43,114,165,.29)}.swal-button[disabled]{opacity:.5;cursor:default}.swal-button::-moz-focus-inner{border:0}.swal-button--cancel{color:#555;background-color:#efefef}.swal-button--cancel:not([disabled]):hover{background-color:#e8e8e8}.swal-button--cancel:active{background-color:#d7d7d7}.swal-button--cancel:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(116,136,150,.29)}.swal-button--danger{background-color:#e64942}.swal-button--danger:not([disabled]):hover{background-color:#df4740}.swal-button--danger:active{background-color:#cf423b}.swal-button--danger:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(165,43,43,.29)}.swal-content{padding:0 20px;margin-top:20px;font-size:medium}.swal-content:last-child{margin-bottom:20px}.swal-content__input,.swal-content__textarea{-webkit-appearance:none;background-color:#fff;border:none;font-size:14px;display:block;box-sizing:border-box;width:100%;border:1px solid rgba(0,0,0,.14);padding:10px 13px;border-radius:2px;transition:border-color .2s}.swal-content__input:focus,.swal-content__textarea:focus{outline:none;border-color:#6db8ff}.swal-content__textarea{resize:vertical}.swal-button--loading{color:transparent}.swal-button--loading~.swal-button__loader{opacity:1}.swal-button__loader{position:absolute;height:auto;width:43px;z-index:2;left:50%;top:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);text-align:center;pointer-events:none;opacity:0}.swal-button__loader div{display:inline-block;float:none;vertical-align:baseline;width:9px;height:9px;padding:0;border:none;margin:2px;opacity:.4;border-radius:7px;background-color:hsla(0,0%,100%,.9);transition:background .2s;-webkit-animation:swal-loading-anim 1s infinite;animation:swal-loading-anim 1s infinite}.swal-button__loader div:nth-child(3n+2){-webkit-animation-delay:.15s;animation-delay:.15s}.swal-button__loader div:nth-child(3n+3){-webkit-animation-delay:.3s;animation-delay:.3s}@-webkit-keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}@keyframes swal-loading-anim{0%{opacity:.4}20%{opacity:.4}50%{opacity:1}to{opacity:.4}}.swal-overlay{position:fixed;top:0;bottom:0;left:0;right:0;text-align:center;font-size:0;overflow-y:auto;background-color:rgba(0,0,0,.4);z-index:10000;pointer-events:none;opacity:0;transition:opacity .3s}.swal-overlay:before{content:" ";display:inline-block;vertical-align:middle;height:100%}.swal-overlay--show-modal{opacity:1;pointer-events:auto}.swal-overlay--show-modal .swal-modal{opacity:1;pointer-events:auto;box-sizing:border-box;-webkit-animation:showSweetAlert .3s;animation:showSweetAlert .3s;will-change:transform}.swal-modal{width:478px;opacity:0;pointer-events:none;background-color:#fff;text-align:center;border-radius:5px;position:static;margin:20px auto;display:inline-block;vertical-align:middle;-webkit-transform:scale(1);transform:scale(1);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;z-index:10001;transition:opacity .2s,-webkit-transform .3s;transition:transform .3s,opacity .2s;transition:transform .3s,opacity .2s,-webkit-transform .3s}@media (max-width:500px){.swal-modal{width:calc(100% - 20px)}}@-webkit-keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes showSweetAlert{0%{-webkit-transform:scale(1);transform:scale(1)}1%{-webkit-transform:scale(.5);transform:scale(.5)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}to{-webkit-transform:scale(1);transform:scale(1)}}</style><meta charset="utf-8">
<script type="text/javascript" src="https://bam.nr-data.net/1/364dba19a3?a=15446117&amp;v=1198.fe6ec20&amp;to=Jg5ZQEdYXQ1XRRZWXQEEaFddVl0NV1leUEFKEl9bQg%3D%3D&amp;rst=1243&amp;ck=1&amp;ref=https://www.codewars.com/kata/582d4b425f8677cba9000135&amp;ap=46&amp;be=301&amp;fe=1215&amp;dc=381&amp;perf=%7B%22timing%22:%7B%22of%22:1613476710703,%22n%22:0,%22u%22:277,%22ue%22:277,%22f%22:0,%22dn%22:0,%22dne%22:0,%22c%22:0,%22ce%22:0,%22rq%22:2,%22rp%22:263,%22rpe%22:267,%22dl%22:286,%22di%22:334,%22ds%22:380,%22de%22:564,%22dc%22:1213,%22l%22:1213,%22le%22:1216%7D,%22navigation%22:%7B%7D%7D&amp;fp=326&amp;fcp=326&amp;jsonp=NREUM.setToken"></script><script src="https://js-agent.newrelic.com/nr-1198.min.js"></script><script>window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"364dba19a3","applicationID":"15446117","transactionName":"Jg5ZQEdYXQ1XRRZWXQEEaFddVl0NV1leUEFKEl9bQg==","queueTime":0,"applicationTime":46,"agent":""}</script>
<script>(window.NREUM||(NREUM={})).loader_config={licenseKey:"364dba19a3",applicationID:"15446117"};window.NREUM||(NREUM={}),__nr_require=function(e,t,n){function r(n){if(!t[n]){var i=t[n]={exports:{}};e[n][0].call(i.exports,function(t){var i=e[n][1][t];return r(i||t)},i,i.exports)}return t[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var i=0;i<n.length;i++)r(n[i]);return r}({1:[function(e,t,n){function r(){}function i(e,t,n){return function(){return o(e,[u.now()].concat(c(arguments)),t?null:this,n),t?void 0:this}}var o=e("handle"),a=e(6),c=e(7),f=e("ee").get("tracer"),u=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],p="api-",l=p+"ixn-";a(d,function(e,t){s[t]=i(p+t,!0,"api")}),s.addPageAction=i(p+"addPageAction",!0),s.setCurrentRouteName=i(p+"routeName",!0),t.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,t){var n={},r=this,i="function"==typeof t;return o(l+"tracer",[u.now(),e,n],r),function(){if(f.emit((i?"":"no-")+"fn-start",[u.now(),r,i],n),i)try{return t.apply(this,arguments)}catch(e){throw f.emit("fn-err",[arguments,this,e],n),e}finally{f.emit("fn-end",[u.now()],n)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,t){m[t]=i(l+t)}),newrelic.noticeError=function(e,t){"string"==typeof e&&(e=new Error(e)),o("err",[e,u.now(),!1,t])}},{}],2:[function(e,t,n){function r(){return c.exists&&performance.now?Math.round(performance.now()):(o=Math.max((new Date).getTime(),o))-a}function i(){return o}var o=(new Date).getTime(),a=o,c=e(8);t.exports=r,t.exports.offset=a,t.exports.getLastTimestamp=i},{}],3:[function(e,t,n){function r(e,t){var n=e.getEntries();n.forEach(function(e){"first-paint"===e.name?d("timing",["fp",Math.floor(e.startTime)]):"first-contentful-paint"===e.name&&d("timing",["fcp",Math.floor(e.startTime)])})}function i(e,t){var n=e.getEntries();n.length>0&&d("lcp",[n[n.length-1]])}function o(e){e.getEntries().forEach(function(e){e.hadRecentInput||d("cls",[e])})}function a(e){if(e instanceof m&&!g){var t=Math.round(e.timeStamp),n={type:e.type};t<=p.now()?n.fid=p.now()-t:t>p.offset&&t<=Date.now()?(t-=p.offset,n.fid=p.now()-t):t=p.now(),g=!0,d("timing",["fi",t,n])}}function c(e){d("pageHide",[p.now(),e])}if(!("init"in NREUM&&"page_view_timing"in NREUM.init&&"enabled"in NREUM.init.page_view_timing&&NREUM.init.page_view_timing.enabled===!1)){var f,u,s,d=e("handle"),p=e("loader"),l=e(5),m=NREUM.o.EV;if("PerformanceObserver"in window&&"function"==typeof window.PerformanceObserver){f=new PerformanceObserver(r);try{f.observe({entryTypes:["paint"]})}catch(v){}u=new PerformanceObserver(i);try{u.observe({entryTypes:["largest-contentful-paint"]})}catch(v){}s=new PerformanceObserver(o);try{s.observe({type:"layout-shift",buffered:!0})}catch(v){}}if("addEventListener"in document){var g=!1,w=["click","keydown","mousedown","pointerdown","touchstart"];w.forEach(function(e){document.addEventListener(e,a,!1)})}l(c)}},{}],4:[function(e,t,n){function r(e,t){if(!i)return!1;if(e!==i)return!1;if(!t)return!0;if(!o)return!1;for(var n=o.split("."),r=t.split("."),a=0;a<r.length;a++)if(r[a]!==n[a])return!1;return!0}var i=null,o=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var c=navigator.userAgent,f=c.match(a);f&&c.indexOf("Chrome")===-1&&c.indexOf("Chromium")===-1&&(i="Safari",o=f[1])}t.exports={agent:i,version:o,match:r}},{}],5:[function(e,t,n){function r(e){function t(){e(a&&document[a]?document[a]:document[i]?"hidden":"visible")}"addEventListener"in document&&o&&document.addEventListener(o,t,!1)}t.exports=r;var i,o,a;"undefined"!=typeof document.hidden?(i="hidden",o="visibilitychange",a="visibilityState"):"undefined"!=typeof document.msHidden?(i="msHidden",o="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(i="webkitHidden",o="webkitvisibilitychange",a="webkitVisibilityState")},{}],6:[function(e,t,n){function r(e,t){var n=[],r="",o=0;for(r in e)i.call(e,r)&&(n[o]=t(r,e[r]),o+=1);return n}var i=Object.prototype.hasOwnProperty;t.exports=r},{}],7:[function(e,t,n){function r(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,i=n-t||0,o=Array(i<0?0:i);++r<i;)o[r]=e[t+r];return o}t.exports=r},{}],8:[function(e,t,n){t.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,t,n){function r(){}function i(e){function t(e){return e&&e instanceof r?e:e?u(e,f,a):a()}function n(n,r,i,o,a){if(a!==!1&&(a=!0),!l.aborted||o){e&&a&&e(n,r,i);for(var c=t(i),f=v(n),u=f.length,s=0;s<u;s++)f[s].apply(c,r);var p=d[h[n]];return p&&p.push([b,n,r,c]),c}}function o(e,t){y[e]=v(e).concat(t)}function m(e,t){var n=y[e];if(n)for(var r=0;r<n.length;r++)n[r]===t&&n.splice(r,1)}function v(e){return y[e]||[]}function g(e){return p[e]=p[e]||i(n)}function w(e,t){s(e,function(e,n){t=t||"feature",h[n]=t,t in d||(d[t]=[])})}var y={},h={},b={on:o,addEventListener:o,removeEventListener:m,emit:n,get:g,listeners:v,context:t,buffer:w,abort:c,aborted:!1};return b}function o(e){return u(e,f,a)}function a(){return new r}function c(){(d.api||d.feature)&&(l.aborted=!0,d=l.backlog={})}var f="nr@context",u=e("gos"),s=e(6),d={},p={},l=t.exports=i();t.exports.getOrSetContext=o,l.backlog=d},{}],gos:[function(e,t,n){function r(e,t,n){if(i.call(e,t))return e[t];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!1}),r}catch(o){}return e[t]=r,r}var i=Object.prototype.hasOwnProperty;t.exports=r},{}],handle:[function(e,t,n){function r(e,t,n,r){i.buffer([e],r),i.emit(e,t,n)}var i=e("ee").get("handle");t.exports=r,r.ee=i},{}],id:[function(e,t,n){function r(e){var t=typeof e;return!e||"object"!==t&&"function"!==t?-1:e===window?0:a(e,o,function(){return i++})}var i=1,o="nr@id",a=e("gos");t.exports=r},{}],loader:[function(e,t,n){function r(){if(!x++){var e=b.info=NREUM.info,t=p.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&t))return u.abort();f(y,function(t,n){e[t]||(e[t]=n)});var n=a();c("mark",["onload",n+b.offset],null,"api"),c("timing",["load",n]);var r=p.createElement("script");r.src="https://"+e.agent,t.parentNode.insertBefore(r,t)}}function i(){"complete"===p.readyState&&o()}function o(){c("mark",["domContent",a()+b.offset],null,"api")}var a=e(2),c=e("handle"),f=e(6),u=e("ee"),s=e(4),d=window,p=d.document,l="addEventListener",m="attachEvent",v=d.XMLHttpRequest,g=v&&v.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:v,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var w=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1198.min.js"},h=v&&g&&g[l]&&!/CriOS/.test(navigator.userAgent),b=t.exports={offset:a.getLastTimestamp(),now:a,origin:w,features:{},xhrWrappable:h,userAgent:s};e(1),e(3),p[l]?(p[l]("DOMContentLoaded",o,!1),d[l]("load",r,!1)):(p[m]("onreadystatechange",i),d[m]("onload",r)),c("mark",["firstbyte",a.getLastTimestamp()],null,"api");var x=0},{}],"wrap-function":[function(e,t,n){function r(e,t){function n(t,n,r,f,u){function nrWrapper(){var o,a,s,p;try{a=this,o=d(arguments),s="function"==typeof r?r(o,a):r||{}}catch(l){i([l,"",[o,a,f],s],e)}c(n+"start",[o,a,f],s,u);try{return p=t.apply(a,o)}catch(m){throw c(n+"err",[o,a,m],s,u),m}finally{c(n+"end",[o,a,p],s,u)}}return a(t)?t:(n||(n=""),nrWrapper[p]=t,o(t,nrWrapper,e),nrWrapper)}function r(e,t,r,i,o){r||(r="");var c,f,u,s="-"===r.charAt(0);for(u=0;u<t.length;u++)f=t[u],c=e[f],a(c)||(e[f]=n(c,s?f+r:r,i,f,o))}function c(n,r,o,a){if(!m||t){var c=m;m=!0;try{e.emit(n,r,o,t,a)}catch(f){i([f,n,r,o],e)}m=c}}return e||(e=s),n.inPlace=r,n.flag=p,n}function i(e,t){t||(t=s);try{t.emit("internal-error",e)}catch(n){}}function o(e,t,n){if(Object.defineProperty&&Object.keys)try{var r=Object.keys(e);return r.forEach(function(n){Object.defineProperty(t,n,{get:function(){return e[n]},set:function(t){return e[n]=t,t}})}),t}catch(o){i([o],n)}for(var a in e)l.call(e,a)&&(t[a]=e[a]);return t}function a(e){return!(e&&e instanceof Function&&e.apply&&!e[p])}function c(e,t){var n=t(e);return n[p]=e,o(e,n,s),n}function f(e,t,n){var r=e[t];e[t]=c(r,n)}function u(){for(var e=arguments.length,t=new Array(e),n=0;n<e;++n)t[n]=arguments[n];return t}var s=e("ee"),d=e(7),p="nr@original",l=Object.prototype.hasOwnProperty,m=!1;t.exports=r,t.exports.wrapFunction=c,t.exports.wrapInPlace=f,t.exports.argsToArray=u},{}]},{},["loader"]);</script><title>PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals] | Codewars</title><meta name="csrf-param" content="authenticity_token">
<meta name="csrf-token" content="a6funwjH58cYXI/DMiW3NZPHMStdBVKzC9WJziW7Q+PwA0hcmylDxlUc/9t6czA1zANC8tIR9y5ETOCVweZxaw=="><link href="https://www.codewars.com/kata/582d4b425f8677cba9000135" rel="canonical"><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"><meta content="PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]" property="og:title"><meta content="website" property="og:type"><meta content="Codewars" property="og:site_name"><meta content="https://www.codewars.com" property="og:url"><meta content="https://www.codewars.com/assets/logos/logo-square-paper-bg-c3d2b1eb4fb35d75b0c0c0e3b74616fab527afdce9d1d3184624cf0b4e950357.jpg" property="og:image"><meta content="https://www.codewars.com/assets/logos/logo-square-paper-bg-c3d2b1eb4fb35d75b0c0c0e3b74616fab527afdce9d1d3184624cf0b4e950357.jpg" property="og:image:secure_url"><meta content="Codewars is where developers achieve code mastery through challenge. Train on kata in the dojo and reach your highest potential." property="og:description"><meta content="652826666" property="fb:admins"><meta content="110951985735625" property="fb:app_id"><meta content="@codewars" name="twitter:site"><meta content="Codewars is where developers achieve code mastery through challenge. Train on kata in the dojo and reach your highest potential." name="description"><meta content="codewars, code kata, kata, code gym, coding, code practice, ruby, javascript, coffeescript, web development, software development, dojo" name="keywords"><meta content="EMv3k6eCCUuSkbwJpGlLbtsBd_lCvmvDp1Ucsv0rIvM" name="google-site-verification"><link href="https://fonts.googleapis.com/css?family=Lato&amp;display=swap" media="screen" rel="stylesheet"><link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css" integrity="sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X" rel="stylesheet"><link rel="stylesheet" media="screen" href="/packs/css/application-59ac6911.chunk.css" data-turbolinks-track="reload"><script src="/packs/js/runtime-61fd9eb1469aaa4d1cc6.js" defer="defer" data-turbolinks-track="reload"></script>
<script src="/packs/js/2-927bfe388674047c9573.chunk.js" defer="defer" data-turbolinks-track="reload"></script>
<script src="/packs/js/application-c79ba8fc22973a586ac0.chunk.js" defer="defer" data-turbolinks-track="reload"></script><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-M3JYSQLS8M"></script><script>window.dataLayer = window.dataLayer || [];
function gtag() { dataLayer.push(arguments); }
gtag('js', new Date());
gtag('config', 'G-M3JYSQLS8M', {
  send_page_view: false
});</script><script id="_carbonads_projs" type="text/javascript" src="https://srv.carbonads.net/ads/CKYILK3L.json?segment=placement:codewarscom&amp;callback=_carbonads_go"></script></head><body class="show_view  full-viewport " id="code_challenges"><div id="app"><h1 class="page-title">Kata</h1><div class="w-full" id="shell"><div class="sidenav-nubbin block md:hidden"><i class="icon-moon-list "></i></div><nav id="sidenav"><ul class="top"><li class="leading-relaxed nav-home"><a class="inline-flex items-center overflow-x-hidden" data-turbolinks="false" href="https://www.codewars.com/"><div class="logo mt-3 flex-shrink-0"><img class="w-full h-full" src="/assets/logos/logo-glyph-36-red-583450fbf586726c570cfd610c94b8f631abfd89d5c4996b4c821a770ca498f9.png"></div><span class="mt-10px ml-3 flex-shrink-0">Sign Up</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="/kata/latest"><div class="text-2xl ml-1.5"><i class="icon-moon-compare "></i></div><span class="ml-4">Kata</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="/kumite"><div class="text-2xl ml-2"><i class="icon-moon-forked "></i></div><span class="ml-4">Kumite</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="https://blog.codewars.com" target="_blank" title="The Codewars Blog"><div class="my-0.5"><svg class="inline-block ml-1 w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path clip-rule="evenodd" d="M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h.28l1.771 5.316A1 1 0 008 18h1a1 1 0 001-1v-4.382l6.553 3.276A1 1 0 0018 15V3z" fill-rule="evenodd"></path></svg></div><span class="ml-5">Blog</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="/topics"><div class="text-2xl ml-1.5"><i class="icon-moon-forum "></i></div><span class="ml-3">Forum</span></a></li><li class="leading-relaxed"><a class="inline-flex items-center" href="https://github.com/codewars/codewars.com/wiki" target="_blank" title="The Codewars Wiki"><div class="text-2xl ml-2"><i class="icon-moon-document "></i></div><span class="ml-4">Wiki</span></a></li></ul><ul class="bottom"><li class="leading-relaxed nav-leaders"><a class="inline-flex items-center" href="/users/leaderboard" title="Leaders"><div class="text-2xl ml-1"><i class="icon-moon-trophy "></i></div><span class="ml-4">Leaders</span></a></li></ul></nav><header class="main is-visible" id="main_header"><ul class="items"><li class="item-list"><a class="js-toggle-dark-mode w-6"><svg class="block dark:hidden" fill="currentColor" viewBox="0 0 20 20"><path clip-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd"></path></svg><svg class="hidden dark:block" fill="currentColor" viewBox="0 0 20 20"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg></a></li><li><span><a class="is-nudged-down-more" data-turbolinks="false" href="/users/sign_in">Log In</a></span></li><li><span><a class="btn is-red text-gray-200 dark:text-white" data-turbolinks="false" href="/">Sign Up</a></span></li></ul></header><main id="shell_content" role="main"><div class="is-hidden" id="global_alerts"><div class="alert-box"></div></div><div id="flash"></div><div class="px-0 w-full"><div class="flex flex-col md:flex-row md:justify-between md:items-center px-2 md:px-4 py-2 mb-0 bg-ui-section"><div class="w-full md:w-5/12"><div class="flex items-center"><div class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div><h4 class="ml-4 mb-3">PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]</h4></div><div class="mt-1 mb-3" data-id="582d4b425f8677cba9000135"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="582d4b425f8677cba9000135:total_stars"></i><span data-rt="582d4b425f8677cba9000135:total_stars">6</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="582d4b425f8677cba9000135:total_stars"></i><span data-rt="582d4b425f8677cba9000135:total_stars">6</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;582d4b425f8677cba9000135&quot;,&quot;name&quot;:&quot;PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="582d4b425f8677cba9000135:total_collections"></i><span data-rt="582d4b425f8677cba9000135:total_collections">3</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 85% of users gave a positive rating out of 26 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">85% <span class="opacity-75">of</span> 26</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>71</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="w-full md:w-7/12"><div class="flex flex-col sm:flex-row sm:justify-around sm:items-center px-8 md:px-0"><div class="w-full sm:w-1/3"><div class="w-180px mx-auto"><div class="dropdown p-4 shadow-sm" id="language_dd"><i class="icon-moon-chevron-sign-down"></i><span class="mr-4"><i class="icon-moon-php "></i>PHP</span><div class="placeholder">Choose language...</div><dl class="overflow-auto"><dd data-href="/kata/582d4b425f8677cba9000135/php" data-load="" data-value="php"><i class="icon-moon-php "></i>PHP</dd></dl></div></div></div><div class="w-full sm:w-2/3 py-2 md:py-0"><div class="text-center md:text-right whitespace-nowrap"><a class="btn" href="/kata/582d4b425f8677cba9000135/train/php" id="play_btn" title="Train on this challenge"><i class="icon-moon-play "></i>Train</a><a class="btn is-dark ml-1 sm:ml-2" href="/trainer/php" id="play_next_btn" title="Train on another challenge"><i class="icon-moon-play "></i>Next Kata</a></div></div></div></div></div></div><div class="w-full mt-2"><div class="flex flex-row justify-between"><ul class="flex flex-row justify-center items-center space-x-5 px-2 border-0 h-10"><li class="flex items-center border-b font-bold"><a class="font-bold">Details</a></li><li class="flex items-center border-b border-transparent"><a href="/kata/582d4b425f8677cba9000135/solutions/php" id="solutions"><i class="icon-moon-bullseye "></i>Solutions</a></li><li class="flex items-center border-b border-transparent"><a href="/kata/582d4b425f8677cba9000135/discuss/php"><i class="icon-moon-comments "></i>Discourse (9)</a></li></ul><div class="js-train-social mt-2 hidden md:block"><a class="js-share-email is-alt" href="mailto:?subject=Take%20the%20Codewars%20challenge%21&amp;body=Hey%2C%0A%0AI%20just%20completed%20training%20on%20%22PHP%20in%20Action%20%233%20-%20HTTP%20POST%20Method%2C%20Input%20Sanitation%20and%20Input%20Validation%20%5BFundamentals%5D%22%20https%3A%2F%2Fwww.codewars.com%2F%2Fkata%2F582d4b425f8677cba9000135%2Fphp%0AIf%20you%27re%20not%20a%20member%20yet%2C%20join%20me%20and%20start%20training%20at%20https%3A%2F%2Fwww.codewars.com%2Fr%2F%0A" target="_blank"><i class="icon-moon-envelope "></i></a><a class="js-share-twitter ml-1 is-alt" data-share-text="I solved the &quot;Fundamental&quot; kata! Take the code initiation @ codewars.com/r/ to enlist and challenge yourself. #codewars"><i class="icon-moon-twitter "></i></a><a class="js-share-facebook ml-1 mr-2 is-alt" data-share-body="I solved the &quot;PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]&quot; kata!" data-share-title="Take the Codewars challenge to enlist!"><i class="icon-moon-facebook "></i></a></div></div><div class="w-full panel bg-ui-section"><div class="markdown prose max-w-none" id="description"><h1 id="php-in-action-3---http-post-method-input-sanitation-and-input-validation-fundamentals">PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]</h1>
<h2 id="about-this-kata-series">About this Kata Series</h2>
<p>"PHP in Action" is a Kata Series authored by <strong>donaldsebleung</strong> which is specifically aimed at novice PHP programmers who have learnt the basic syntax and features of the PHP programming language in online courses such as Codecademy but do not know how to apply it in real-world situations.  Hence, this Kata Series will focus on the practical aspects of PHP such as sending emails, form validation and setting cookies.</p>
<p>This Kata Series assumes that you have already learnt the fundamentals of PHP such as data types (e.g. strings, numbers, booleans), functions and basic OOP.  A good indicator that you are ready for this Kata Series is if you can complete <a href="https://www.codewars.com/kata/multiply/train/php" target="_blank">Multiply (8kyu) in PHP</a> <strong>and</strong> the first four Kata in my <a href="https://www.codewars.com/collections/object-oriented-php" target="_blank">Object-Oriented PHP</a> Series without hesitation and without referring to external sources in the process.  Since real-world PHP is commonly used in conjunction with <strong>HTML and CSS</strong> (and sometimes even <strong>Javascript</strong>), you will also be expected to have a basic understanding of the following programming languages.  In certain Kata in this Series where form validation is involved, you may also be expected to be familiar with HTML forms, what attributes they have and how they work.</p>
<h2 id="lesson">Lesson</h2>
<p>Last lesson, we learned that when your browser sends a request to the server containing the webpage files, it uses the <code>GET</code> method by default, unless the request was made when an HTML form with the attribute <code>method="post"</code> was submitted, in which case the <code>POST</code> method is used instead.  We also learned that we could detect which method was used in the web request in PHP by accessing the <code>"REQUEST_METHOD"</code> key of the <code>$_SERVER</code> superglobal, which is an associative array.</p>
<p>This lesson, we will learn the basics of handling submitted form data via the HTTP POST method.</p>
<h3 id="a-simple-example">A Simple Example</h3>
<p>Before we start, you may remember from last lesson that it was possible to pass in URL parameters in the following format: <code>http://somewebsite.tld/path/to/the/php_file.php?param1=somevalue&amp;param2=someothervalue&amp;param3=yetsomeothervalue</code>, where <code>?</code> is the delimiter between the actual URL and the URL parameters and <code>&amp;</code> is the delimiter between different key/value pairs within the URL parameters.  The URL parameters can then be accessed as key/value pairs in the <strong>superglobal</strong> associative array called <code>$_GET</code>.  Similarly, form data submitted through a form with attribute <code>method="post"</code> can be accessed as <strong>key/value pairs</strong> in the <strong>superglobal</strong> associative array called <code>$_POST</code>, where the <strong>key</strong> is the <code>name</code> attribute of a particular input field and the <strong>value</strong> is what the user entered into that particular input field.  Below is a possible (<em>purely fictional</em>) real-world example:</p>
<p>Timmy is an enthusiastic PHP Developer who wants as many people in the world as possible to learn how to code in PHP, so he has recently decided to start an online service called <strong>PHPWars</strong> where PHP developers can train on PHP coding exercises and improve upon their PHP coding skills.  However, since <strong>PHPWars</strong> is quite a large project, it is estimated that it will take at least a few months before he can finally get the service live.  In order to prevent his potential customers from forgetting about or losing interest in his online project in this time period, he has created an online HTML form on his website so anyone who may be interested in his project can enter their personal details and email address.  When the form is submitted, the personal details and email address the customer entered is saved in a database so in the near future, when his project is near completion, he can use his website to automatically send emails to his potential customers to remind them that <strong>PHPWars</strong> is about to go live.  The HTML code he used for his signup form is as follows:</p>
<pre><code class="language-php"><span class="cm-operator">&lt;</span><span class="cm-variable">h2</span><span class="cm-operator">&gt;</span><span class="cm-variable">Get</span> <span class="cm-variable">Notifications</span> <span class="cm-variable">on</span> <span class="cm-variable">PHPWars</span><span class="cm-operator">&lt;</span><span class="cm-variable">sup</span><span class="cm-operator">&gt;</span><span class="cm-variable">TM</span><span class="cm-operator">&lt;/</span><span class="cm-variable">sup</span><span class="cm-operator">&gt;&lt;/</span><span class="cm-variable">h2</span><span class="cm-operator">&gt;</span>
<span class="cm-operator">&lt;</span><span class="cm-variable">form</span> <span class="cm-variable">action</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">&lt;?php echo htmlspecialchars(</span><span class="cm-variable-2">$_SERVER</span>[<span class="cm-string"></span><span class="cm-string">"</span><span class="cm-variable">PHP_SELF</span><span class="cm-string">"</span><span class="cm-string">]); ?&gt;"</span> <span class="cm-variable">method</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">post"</span><span class="cm-operator">&gt;</span>
  <span class="cm-operator">&lt;</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
    <span class="cm-operator">&lt;</span><span class="cm-variable">input</span> <span class="cm-variable">type</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">text"</span> <span class="cm-variable">name</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">name"</span> <span class="cm-variable">placeholder</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">Full Name"</span> <span class="cm-operator">/&gt;</span>
  <span class="cm-operator">&lt;/</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
  <span class="cm-operator">&lt;</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
    <span class="cm-operator">&lt;</span><span class="cm-variable">input</span> <span class="cm-variable">type</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">text"</span> <span class="cm-variable">name</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">age"</span> <span class="cm-variable">placeholder</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">Age"</span> <span class="cm-operator">/&gt;</span>
  <span class="cm-operator">&lt;/</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
  <span class="cm-operator">&lt;</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
    <span class="cm-operator">&lt;</span><span class="cm-variable">input</span> <span class="cm-variable">type</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">email"</span> <span class="cm-variable">name</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">email"</span> <span class="cm-variable">placeholder</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">Email Address"</span> <span class="cm-operator">/&gt;</span>
  <span class="cm-operator">&lt;/</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
  <span class="cm-operator">&lt;</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
    <span class="cm-operator">&lt;</span><span class="cm-variable">input</span> <span class="cm-variable">type</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">submit"</span> <span class="cm-variable">value</span><span class="cm-operator">=</span><span class="cm-string">"</span><span class="cm-string">Sign Up"</span> <span class="cm-operator">/&gt;</span>
  <span class="cm-operator">&lt;/</span><span class="cm-variable">p</span><span class="cm-operator">&gt;</span>
<span class="cm-operator">&lt;/</span><span class="cm-variable">form</span><span class="cm-operator">&gt;</span></code></pre>
<p>... and the form looks something like this:</p>
<p><img alt="PHPWars Signup Form" src="https://i.imgur.com/z4ujvkN.png"></p>
<p>Firstly, below the <code>&lt;h2&gt;</code> tags, notice that the opening <code>&lt;form&gt;</code> tag has <em>two</em> attributes: <code>action</code> and <code>method</code>.  As mentioned before, the <code>method</code> attribute specifies the method that your browser sends a request to the server containing the webpage files as the form is being submitted, which in this case (and most other cases) is <code>"post"</code>.  This means that when the form is submitted, the form data can be accessed as key/value pairs in the <code>$_POST</code> superglobal and <strong>not</strong> the <code>$_GET</code> superglobal.  The POST method is most often used with HTML forms because it has a number of advantages compared to GET: it does not show the submitted information in the URL (which can pose a security issue especially when sensitive information such as passwords are involved) and there is no limit as to how much form data the POST method can hold (there is a limit as to how much data you can cram into an URL via URL parameters with the GET method which is summarised <a href="http://www.w3schools.com/tags/ref_httpmethods.asp" target="_blank">here on W3Schools</a>).  One of the few exceptions to this rule is when creating a search form where you can safely set the <code>method</code> attribute to <code>"get"</code> as the search keywords entered into the search form is not sensitive data (and is usually short enough that the GET data restriction has virtually no effect on the query).</p>
<p>As for the <code>action</code> attribute of the HTML form, notice that we have PHP code inserted within that attribute, surrounded by PHP script tags (<code>&lt;?php</code> and <code>?&gt;</code>).  If you read the PHP code inside those script tags carefully, you will see an <code>echo</code> statement which basically means text is being dynamically printed out into that attribute.  You may also notice that what is being printed out looks a little bit weird: <code>htmlspecialchars($_SERVER["PHP_SELF"])</code>.  If you don't freak out by that weird-looking code and take a closer look, you will see that it is simply the value <code>$_SERVER["PHP_SELF"]</code> passed into a function called <code>htmlspecialchars()</code>.  As you may remember from previous lessons, the <code>$_SERVER</code> variable is yet another one of the few <strong>superglobals</strong> predefined in PHP.  The <code>$_SERVER</code> superglobal contains a key called <code>"PHP_SELF"</code> which basically contains the <strong>relative URL</strong> of the current webpage file.  For example, let's say that Timmy's website is located at <code>http://phpwars.com</code> and the current PHP file containing this HTML form is a file called <code>index.php</code> located at the root directory of the website.  <code>$_SERVER["PHP_SELF"]</code> will then be equal to the relative URL <code>"/index.php"</code> in that particular PHP file.  What <code>$_SERVER["PHP_SELF"]</code> essentially does in this case is that it will always set the <code>action</code> attribute of the HTML form equal to the path to the current PHP file/script so that when the form is submitted, the form data will <strong>always</strong> be submitted back into the same page wherever the current PHP script is located.  This in turn means that the <code>action</code> attribute of the HTML form will always be a valid URL no matter where this PHP script and HTML form is placed in the website.</p>
<p>Next, take a look at the <strong>first three</strong> <code>&lt;input&gt;</code> tags.  You will notice that each of them has exactly three attributes, <code>type</code>, <code>name</code> and <code>placeholder</code>.  The <code>type</code> attribute of an <code>&lt;input&gt;</code> field specifies the type of form data that goes into each field.  In the case of the full name and age of the customer, the type of form data entered into those fields would naturally be plain <code>"text"</code> as there is nothing special about the importance and/or format of a person's name and/or age.  As for the email field, Timmy <em>could</em> also have used a plaintext field (<code>type="text"</code>) to record the email address but HTML forms also specifically support an <code>"email"</code> data type which allows for some degree of input validation in the form itself (in <em>some</em> browsers only) before the form data in that field is actually passed into the PHP code.  Other possible types of input types include <code>"password"</code> (which masks all the characters in identical black dots) and <code>"radio"</code> (where you select exactly one choice out of many).</p>
<p>Another attribute you would have noticed is the <code>placeholder</code> attribute which is essentially the grey text displayed to the user inside the input fields when they are empty in order to show the user what input is expected.</p>
<p>However, the <strong>most important</strong> attribute of an <code>&lt;input&gt;</code> field which makes each input field unique is its <code>name</code> attribute.  As you can see, the first input field has a name of <code>"name"</code>, the second one <code>"age"</code> and the third one <code>"email"</code>.  The <code>name</code> attribute is especially important because it is used as the <strong>key</strong> in the key/value pairs found in the <code>$_POST</code> superglobal when the form data is submitted.  Let's say we have a user, John Doe, for example, and he has typed in the following data into the signup form before pressing the "Sign Up" button:</p>
<p><img alt="John Doe's Credentials on the PHPWars Signup Form" src="https://i.imgur.com/V3szTmr.png"></p>
<p>The following would then hold true <strong>once John submits the form by pressing on the "Sign Up" button</strong>:</p>
<pre><code class="language-php"><span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">name"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">John Doe"</span>;
<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">age"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">25"</span>;
<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">email"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">johndoe@example.tld"</span>;</code></pre>
<p><strong>Note that form data submitted by a user are ALWAYS strings.  Even if users entered a number (like in the age field above), the corresponding form data is received as a STRING, not a number.  Keep that in mind when manipulating form data.</strong></p>
<p>Timmy can then validate, sanitize and manipulate the form data in his PHP script as he wishes.  In this case he would probably want to enter and save the form data in his database so he can send automated emails in the near future.</p>
<p>Returning back to the HTML form, you may have wondered where the "Sign Up" button came from and whether it automatically appeared every time you use the <code>&lt;form&gt;</code> tags.  If you are clever enough, you would have noticed that there is fourth <code>&lt;input&gt;</code> field with only <em>two</em> attributes instead of three.  That's right, the "Submit" (or signup) button is treated as an <code>&lt;input&gt;</code> field.  As you can see, its <code>type</code> attribute is set to <code>"submit"</code> indicating that it is the button to be pressed in order to <strong>submit the form data</strong>.  Note that a submit button does <strong>not</strong> have a <code>name</code> attribute as its sole purpose is to submit the form data to the target URL specified by the <code>action</code> attribute of the form itself and therefore does not hold any form data in and of itself.  It also does not have a <code>placeholder</code> attribute as nothing is entered into a Submit (or signup) button so no placeholder text has to be displayed to the user to tell them what to enter.  However, it does have a <code>value</code> attribute which specifies what the button should read.  In this case the <code>value</code> attribute is set to <code>"Sign Up"</code> so in the screenshots above you can see that the text on the submit button reads "Sign Up".  Note that the <code>value</code> attribute of the Submit button is <em>optional</em>, if it is omitted, the Submit button reads exactly "Submit" by default.</p>
<p>Before we move on to the actual Task, I would like to walk you through a worked example of a functioning contact form and its corresponding PHP script, complete with input validation and sanitation so you can get a feel of how it actually works in the real world.  If you have a local server installed in your computer, you may want to boot that up and create a new PHP file to follow the worked example which I will guide you through now.</p>
<h3 id="worked-example-a-simple-contact-form-for-your-website">Worked Example: A simple contact form for your website</h3>
<p>Suppose you have a personal website (or maybe you actually do!) that uses PHP as its server-side language.  You would like to create a simple, minimal contact form at the homepage of your website so your visitors can send you email messages directly through your website.</p>
<p>Before we start writing our PHP code, we should first formulate our actual HTML form:</p>
<pre><code class="language-html">&lt;form action="&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;
  &lt;p&gt;
    &lt;input type="text" name="name" placeholder="Name" /&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="email" name="email" placeholder="Email" /&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;textarea name="message" placeholder="Message"&gt;&lt;/textarea&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="submit" value="Send Message" /&gt;
  &lt;/p&gt;
&lt;/form&gt;</code></pre>
<p><img alt="Worked Example - Contact Form" src="https://i.imgur.com/l7y3Wqq.png"></p>
<p>By now you should be aware what all of the attributes (and the embedded PHP code) in the <code>&lt;form&gt;</code> and <code>&lt;input&gt;</code> tags mean and do; if you do not, please scroll back up to the section "A Simple Example" and re-read it until you understand what is going on.  It is especially important that you know the <em>exact</em> roles of the embedded PHP script in the <code>action</code> attribute of the form itself and the <code>name</code> attributes of each <code>&lt;input&gt;</code> field.</p>
<p>You will also notice a new form element in this worked example: the <code>&lt;textarea&gt;</code> field.  The <code>&lt;textarea&gt;</code> field is very similar to the <code>&lt;input&gt;</code> field in a lot of ways except it is specifically designed to receive (and display) more text, such as an entire paragraph or essay, where the <code>&lt;input&gt;</code> field will not display all the typed text properly.  As you can see, the <code>&lt;textarea&gt;</code> tag also has the same attributes as an <code>&lt;input&gt;</code> tag: it has an input <code>type</code> which is text (as an email message is essentially that), a <code>name</code> of <code>"message"</code> (which will be the <strong>key</strong> of a key/value pair in the <code>$_POST</code> superglobal <em>once the form is submitted</em>) and a <code>placeholder</code> of <code>"Message"</code>.  If you are comfortable with the HTML form, we will now move on to the actual PHP code to handle this.</p>
<p>While you may want to use the form data to send the email to your email address straight away, you must always bear in mind that the visitor may not always land on your page with the contact form by submitting the HTML form, <em>especially since the page containing the form and receiving the form data is one and the same</em>.  If the visitor lands on your page handling the form data without submitting the form beforehand, the <code>$_POST</code> superglobal will not contain the keys <code>"name"</code>, <code>"email"</code> and <code>"message"</code> so when you try to access them directly from the <code>$_POST</code> superglobal (like such, e.g. <code>$_POST["message"]</code>), an Error or Exception of some type will be thrown which will immediately terminate your entire PHP script, causing display problems to the visitor and more.  In order to prevent this from happening, you must always first check whether the form was submitted in the first place by checking the value of <code>$_SERVER["REQUEST_METHOD"]</code>.  Inside your <code>&lt;?php</code> <code>?&gt;</code> script tags, type in the following PHP code:</p>
<pre><code class="language-php"><span class="cm-keyword">if</span> (<span class="cm-variable-2">$_SERVER</span>[<span class="cm-string">"</span><span class="cm-string">REQUEST_METHOD"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">POST"</span>) {

}</code></pre>
<p>By then placing all your form data-handling code inside this conditional statement, you ensure that you will not accidentally access a non-existent key in the <code>$_POST</code> superglobal and cause an uncaught Error/Exception.</p>
<p>Next off, note that the name of the visitor and/or his/her message to you may contain any combination of characters (or you <em>could</em> restrict the name of the visitor to alphanumeric characters only by using a <strong>regex test</strong> but we will not cover that in this lesson), <em>but</em> an email address will always ever be in a particular format.  For example, <code>johndoe@example.tld</code> is a valid email address and <code>abcslj934()*/:&lt;&gt;</code> is not.  To ensure that the email address the visitor provided is actually valid, you must first <strong>validate</strong> it either by using your own regex test (which I will not cover), <strong>or</strong> you can use certain built-in functions and filters in PHP to achieve the same thing.</p>
<p>Enter <code>filter_var()</code>!  This built-in PHP function accepts <strong>two</strong> arguments, the first in which is the actual input (which in this case would be the user-entered email address, <code>$_POST["email"]</code>) and the second in which is the type of filter to be used to validate a particular type of input.  In this case, we would use the <code>FILTER_VALIDATE_EMAIL</code> filter in order to confirm that the entered email address is actually valid.  If it is invalid, we do <strong>not</strong> process the rest of the form data and instead print out an error message to the visitor telling him/her that the message was not sent:</p>
<pre><code class="language-php"><span class="cm-keyword">if</span> (<span class="cm-variable-2">$_SERVER</span>[<span class="cm-string">"</span><span class="cm-string">REQUEST_METHOD"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">POST"</span>) {
  <span class="cm-keyword">if</span> (<span class="cm-operator">!</span><span class="cm-variable">filter_var</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">email"</span>], <span class="cm-variable">FILTER_VALIDATE_EMAIL</span>)) {
    <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;&lt;span style=\"color: red\"&gt;Sorry, the email address you provided is not valid so the message was not sent.&lt;/span&gt;&lt;/p&gt;"</span>;
  } <span class="cm-keyword">else</span> {

  }
}</code></pre>
<p>The <code>filter_var()</code> function returns a <strong>boolean</strong> depending on whether the input is of a particular type (validated against a built-in <strong>filter</strong> constant).  If the tested input is valid (in this case, if the email address is valid), <code>filter_var()</code> returns <code>true</code> and <code>false</code> otherwise.  So the new conditional we just added is essentially saying, "If the email address provided is not valid, <code>echo</code> some colored HTML telling the visitor that their email is not valid and so their message was not sent."  For example, if the following was typed into our contact form:</p>
<p><img alt="Invalid Email Address in Contact Form" src="https://i.imgur.com/5O1JBwW.png"></p>
<p>Once the form is submitted, the following red text would appear:</p>
<p><img alt="Invalid Email Address Message" src="https://i.imgur.com/Forpnc3.png"></p>
<p>If the email address is valid, we must still check whether the visitor has left the <code>"name"</code> and/or <code>"message"</code> fields empty.  We certainly don't want spammers sending loads of empty emails with no name to our email account!  The built-in <code>empty()</code> function in PHP receives a single argument which is the input data and checks if it is empty (i.e. an empty string):</p>
<pre><code class="language-php"><span class="cm-keyword">if</span> (<span class="cm-variable-2">$_SERVER</span>[<span class="cm-string">"</span><span class="cm-string">REQUEST_METHOD"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">POST"</span>) {
  <span class="cm-keyword">if</span> (<span class="cm-operator">!</span><span class="cm-variable">filter_var</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">email"</span>], <span class="cm-variable">FILTER_VALIDATE_EMAIL</span>)) {
    <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;&lt;span style=\"color: red\"&gt;Sorry, the email address you provided is not valid so the message was not sent.&lt;/span&gt;&lt;/p&gt;"</span>;
  } <span class="cm-keyword">else</span> {
    <span class="cm-keyword">if</span> (<span class="cm-keyword">empty</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">name"</span>]) <span class="cm-operator">||</span> <span class="cm-keyword">empty</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">message"</span>])) {
      <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;&lt;span style=\"color: red\"&gt;Sorry, the name and message fields are required.  The message was not sent.&lt;/span&gt;&lt;/p&gt;"</span>;
    } <span class="cm-keyword">else</span> {

    }
  }
}</code></pre>
<p>Again, the <code>empty()</code> function returns a boolean, <code>true</code> if the tested input is empty and <code>false</code> otherwise.  If it is indeed empty, we print out another red message to tell the user what's wrong.</p>
<p><img alt="Name and Message Fields not filled in" src="https://i.imgur.com/sv2iPnB.png"></p>
<p><img alt="Corresponding Error Message for empty name/message fields" src="https://i.imgur.com/4LeSE80.png"></p>
<p>Now that we've confirmed that the name and message fields are not empty and that the email address is valid, we can then proceed to <strong>sanitize</strong> our form data:</p>
<pre><code class="language-php"><span class="cm-keyword">if</span> (<span class="cm-variable-2">$_SERVER</span>[<span class="cm-string">"</span><span class="cm-string">REQUEST_METHOD"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">POST"</span>) {
  <span class="cm-keyword">if</span> (<span class="cm-operator">!</span><span class="cm-variable">filter_var</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">email"</span>], <span class="cm-variable">FILTER_VALIDATE_EMAIL</span>)) {
    <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;&lt;span style=\"color: red\"&gt;Sorry, the email address you provided is not valid so the message was not sent.&lt;/span&gt;&lt;/p&gt;"</span>;
  } <span class="cm-keyword">else</span> {
    <span class="cm-keyword">if</span> (<span class="cm-keyword">empty</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">name"</span>]) <span class="cm-operator">||</span> <span class="cm-keyword">empty</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">message"</span>])) {
      <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;&lt;span style=\"color: red\"&gt;Sorry, the name and message fields are required.  The message was not sent.&lt;/span&gt;&lt;/p&gt;"</span>;
    } <span class="cm-keyword">else</span> {
      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">name"</span>];
      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">email"</span>];
      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">message"</span>];

      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-builtin">trim</span>(<span class="cm-variable-2">$name</span>);
      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-builtin">stripslashes</span>(<span class="cm-variable-2">$name</span>);
      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-builtin">htmlspecialchars</span>(<span class="cm-variable-2">$name</span>);

      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-builtin">trim</span>(<span class="cm-variable-2">$email</span>);
      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-builtin">stripslashes</span>(<span class="cm-variable-2">$email</span>);
      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-builtin">htmlspecialchars</span>(<span class="cm-variable-2">$email</span>);

      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-builtin">trim</span>(<span class="cm-variable-2">$message</span>);
      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-builtin">stripslashes</span>(<span class="cm-variable-2">$message</span>);
      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-builtin">htmlspecialchars</span>(<span class="cm-variable-2">$message</span>);
    }
  }
}</code></pre>
<p>We have saved the <code>name</code>, <code>email</code> and <code>message</code> received from the form data in the global variables <code>$name</code>, <code>$email</code> and <code>$message</code> before modifying the <strong>global variables</strong> and not the form data itself as it is always a good practice to leave the actual form data as it is.  We then proceeded to sanitize <code>$name</code>, <code>$email</code> and <code>$message</code> respectively by using the three functions <code>htmlspecialchars()</code>, <code>stripslashes()</code> and <code>trim()</code>.  You will have come across <code>htmlspecialchars()</code> in previous lessons before, but the <code>trim()</code> function removes leading and trailing whitespace characters (including newlines and tabs etc.) and the <code>stripslashes()</code> function <a href="http://php.net/manual/en/function.stripslashes.php" target="_blank">unquotes a quoted string</a> (whatever that means).  Of all, the most important data sanitation function is <code>htmlspecialchars()</code> as it can help prevent Cross-Site Scripting (XSS) which should already be mentioned in previous lessons.  If you aren't aware of it, you can search it up on W3Schools and they give quite a thorough explanation what that exactly is.</p>
<p>There are also certain other methods of input sanitation.  For example, if you are using the form data to enter information into a database using SQL, you would need to implement some sort of regex test to ensure that the input data does not contain certain SQL key words so <a href="http://www.w3schools.com/Sql/sql_injection.asp" target="_blank">SQL Injection</a> cannot take place.</p>
<p>Now that your form data is properly sanitized, you can do whatever you want with it.  You would want to send the form data to your email address using <code>mail()</code> (which will be covered in future lessons) but for now let's just display to the user what they have entered into the form itself:</p>
<pre><code class="language-php"><span class="cm-keyword">if</span> (<span class="cm-variable-2">$_SERVER</span>[<span class="cm-string">"</span><span class="cm-string">REQUEST_METHOD"</span>] <span class="cm-operator">===</span> <span class="cm-string">"</span><span class="cm-string">POST"</span>) {
  <span class="cm-keyword">if</span> (<span class="cm-operator">!</span><span class="cm-variable">filter_var</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">email"</span>], <span class="cm-variable">FILTER_VALIDATE_EMAIL</span>)) {
    <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;&lt;span style=\"color: red\"&gt;Sorry, the email address you provided is not valid so the message was not sent.&lt;/span&gt;&lt;/p&gt;"</span>;
  } <span class="cm-keyword">else</span> {
    <span class="cm-keyword">if</span> (<span class="cm-keyword">empty</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">name"</span>]) <span class="cm-operator">||</span> <span class="cm-keyword">empty</span>(<span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">message"</span>])) {
      <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;&lt;span style=\"color: red\"&gt;Sorry, the name and message fields are required.  The message was not sent.&lt;/span&gt;&lt;/p&gt;"</span>;
    } <span class="cm-keyword">else</span> {
      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">name"</span>];
      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">email"</span>];
      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-variable-2">$_POST</span>[<span class="cm-string">"</span><span class="cm-string">message"</span>];

      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-builtin">trim</span>(<span class="cm-variable-2">$name</span>);
      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-builtin">stripslashes</span>(<span class="cm-variable-2">$name</span>);
      <span class="cm-variable-2">$name</span> <span class="cm-operator">=</span> <span class="cm-builtin">htmlspecialchars</span>(<span class="cm-variable-2">$name</span>);

      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-builtin">trim</span>(<span class="cm-variable-2">$email</span>);
      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-builtin">stripslashes</span>(<span class="cm-variable-2">$email</span>);
      <span class="cm-variable-2">$email</span> <span class="cm-operator">=</span> <span class="cm-builtin">htmlspecialchars</span>(<span class="cm-variable-2">$email</span>);

      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-builtin">trim</span>(<span class="cm-variable-2">$message</span>);
      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-builtin">stripslashes</span>(<span class="cm-variable-2">$message</span>);
      <span class="cm-variable-2">$message</span> <span class="cm-operator">=</span> <span class="cm-builtin">htmlspecialchars</span>(<span class="cm-variable-2">$message</span>);

      <span class="cm-comment">// Display the sanitized form data to the user</span>
      <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;Your Name: </span><span class="cm-variable-2">$name</span><span class="cm-string">&lt;/p&gt;"</span>;
      <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;Your Email Address: </span><span class="cm-variable-2">$email</span><span class="cm-string">&lt;/p&gt;"</span>;
      <span class="cm-keyword">echo</span> <span class="cm-string">"</span><span class="cm-string">&lt;p&gt;Your Message: </span><span class="cm-variable-2">$message</span><span class="cm-string">&lt;/p&gt;"</span>;
    }
  }
}</code></pre>
<p>And ... tada!  Your contact form is "complete" :D (well, not really as an email isn't sent, but at least you got this far!)</p>
<p><img alt="Contact Form with Full Details" src="https://i.imgur.com/muyLp7S.png"></p>
<p><img alt="Sanitized Form Data Shown" src="https://i.imgur.com/Vsc2Wg3.png"></p>
<p><em>(Whoops, just realised that the provided name and the name used in the actual message body do not match up but whatever :p)</em></p>
<p>Therefore, to summarize, whenever you want to use a PHP script to handle form data, <strong>always</strong> do the following <strong>in order</strong>:</p>
<ol>
<li>Make sure that the user landed on your PHP script that handles the form data <strong>by actually submitting the form and not simply visiting it</strong> - if that is not the case, prepare an error message and <strong>do not attempt to access the (nonexistent) form data</strong></li>
<li><strong>Validate</strong> all of your form input - make sure that all of the form data is in the correct format</li>
<li><strong>Sanitize</strong> all of your form input - you don't want hackers injecting malicious JavaScript code into your website</li>
<li>Finally, when the form data is safe, you can manipulate the form data as you wish.</li>
</ol>
<h2 id="task">Task</h2>
<p><em>Note: The lesson provided in this Kata is designed to teach you most, if not all, of the key concepts required to complete the Task in this Kata.  However, if in doubt, you are strongly encouraged to conduct your own research.</em></p>
<h3 id="warm-up-exercise">Warm-Up Exercise</h3>
<p>Before we start writing an actual script to handle the form data, let's first see if you actually understand how POST data works.</p>
<p>Using the HTML form defined in the section "Worked Example: A simple contact form for your website", <strong>set the correct key/value pairs in the</strong> <code>$_POST</code> <strong>superglobal</strong> provided that the data shown in the screenshot is submitted:</p>
<p><img alt="Screenshot for Warm Up Exercise" src="https://i.imgur.com/N3sWfKv.png"></p>
<p><strong>Note that in real life, you would almost NEVER directly assign key/value pairs to the</strong> <code>$_POST</code> <strong>superglobal using your PHP script as the whole purpose of that superglobal is to allow you to collect form data.  This warm-up exercise is just to test your understanding on what key/value pairs are created when a given HTML form is submitted.</strong></p>
<h3 id="form-data-handling-script">Form Data-Handling Script</h3>
<p>You have recently authored an entire Kata Series on Codewars and would like to use an HTML form to collect feedback from your fellow codewarriors.  The HTML code for the form is as follows:</p>
<pre><code class="language-html">&lt;form action="&lt;?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;" method="post"&gt;
  &lt;p&gt;
    &lt;input type="text" name="name" placeholder="Your Name" /&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="text" name="age" placeholder="Your Age" /&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="email" name="email" placeholder="Your Email Address" /&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="text" name="rating" placeholder="Rate out of 10" /&gt;
  &lt;/p&gt;
  &lt;p&gt;
    What did you like about this Kata Series?
  &lt;/p&gt;
  &lt;p&gt;
    &lt;textarea name="compliments"&gt;&lt;/textarea&gt;
  &lt;/p&gt;
  &lt;p&gt;
    What could be improved about this Kata Series?
  &lt;/p&gt;
  &lt;p&gt;
    &lt;textarea name="criticism"&gt;&lt;/textarea&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="submit" /&gt;
  &lt;/p&gt;
&lt;/form&gt;</code></pre>
<p>Its appearance is shown in the screenshot below:</p>
<p><img alt="Form Data-Handling Script HTML Form Appearance" src="https://i.imgur.com/mtkEo2S.png"></p>
<p>Inside the <code>user_script()</code> function, write a PHP script that does the following:</p>
<ol>
<li>Make sure that the visitor landed on this PHP script by a form submission - if that is not the case, do NOT attempt to do anything!  This should be achieved by using a suitable <em>conditional statement</em> as shown in the lesson.</li>
<li>Using a suitable built-in PHP function or otherwise, check that the visitor actually entered <em>something</em> in the <code>"name"</code> field of the feedback form.  If the visitor left that input field blank, <code>echo</code> the following string as shown: <code>"&lt;span style=\"color: red\"&gt;Name field is required&lt;/span&gt;"</code></li>
<li>Now check if the visitor provided a valid age.  For the purposes of this Kata, there is no limit to the magnitude of a person's age, nor do you need to check whether the input age is positive or negative; however, you <strong>must</strong> ensure that the input age is <strong>numeric</strong> using a built-in PHP function or otherwise.  If the input age is not numeric, <code>echo</code> the following message: <code>"&lt;span style=\"color: red\"&gt;Invalid Age provided&lt;/span&gt;"</code></li>
<li>Make sure the visitor provided a valid email address, using built-in PHP functions and filters or otherwise.  If the email provided is invalid or empty <code>echo</code> the string: <code>"&lt;span style=\"color: red\"&gt;Email Address is Invalid&lt;/span&gt;"</code></li>
<li>Make sure the rating that the user provided is an integer in the range <code>1</code> to <code>10</code> (both inclusive).  However, note that POST data is <strong>always</strong> in the form of a string, so keep that in mind when validating the rating.  If the rating is invalid, output the string <code>"&lt;span style=\"color: red\"&gt;Rating is invalid, please provide a number from 1 to 10&lt;/span&gt;"</code></li>
<li>It has been decided that the last two fields of the feedback form are optional so you do <strong>not</strong> need to ensure that they are not empty.  Now that you have thoroughly validated the form input, it is time to properly sanitize the form input.  First save each piece of form data into a <strong>global</strong> variable with the exact same name as the <code>name</code> attributes of each input field (including the <code>&lt;textarea&gt;</code>s).  For example, if there is a <code>&lt;textarea&gt;</code> or <code>&lt;input&gt;</code> with <code>name="example"</code>, the value of that form data should be stored into a global variable called <code>$example</code>.  Then pass each global variable into the sanitation functions <code>trim()</code>, <code>stripslashes()</code> and <code>htmlspecialchars()</code> respectively and assign the sanitized value back into each global variable.</li>
</ol>
<p>You may now do whatever you like with the form input!  You may choose to print it back out to the visitor, use it to send an email, save it in a database, etc.  Note that this will <strong>not</strong> be tested for the purposes of this Kata.</p>
<h2 id="kata-in-this-series">Kata in this Series</h2>
<ol>
<li><a href="https://www.codewars.com/kata/php-in-action-number-1-introduction-to-superglobals-fundamentals" target="_blank">PHP in Action #1 - Introduction to Superglobals [Fundamentals]</a></li>
<li><a href="https://www.codewars.com/kata/php-in-action-number-2-http-get-method-fundamentals" target="_blank">PHP in Action #2 - HTTP GET Method [Fundamentals]</a></li>
<li><strong>PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]</strong></li>
<li><a href="https://www.codewars.com/kata/php-in-action-number-4-mailing-scripts" target="_blank">PHP in Action #4 - Mailing Scripts</a></li>
<li><a href="https://www.codewars.com/kata/584f6d272ddeec19bf00018a" target="_blank">PHP in Action #5 - PHPMailer Intro</a></li>
</ol>
<h2 id="you-may-also-like">You May Also Like</h2>
<ul>
<li><a href="https://www.codewars.com/collections/object-oriented-php" target="_blank">Object-Oriented PHP</a></li>
<li><a href="https://www.codewars.com/collections/php-functions" target="_blank">PHP Functions</a></li>
<li><a href="https://www.codewars.com/collections/reflection-in-php" target="_blank">Reflection in PHP</a></li>
</ul>
</div><div class="mt-15px"><span><i class="icon-moon-tag "></i></span><div class="keyword-tag">Fundamentals</div></div></div><div class="flex flex-col md:flex-row"><div class="w-full md:w-2/3 panel bg-ui-section" style="min-height: 120px;"><h3 class="mt-0">These users have contributed to this kata:</h3><ul class="flex flex-wrap list-none mb-0"><li class="m-1"><a href="/users/56adf486d768208a3a000071"><img class="w-10 h-10" title="donaldsebleung" data-tippy-content="donaldsebleung" data-tippy-placement="bottom" src="https://avatars.githubusercontent.com/u/7777884?s=100"></a></li><li class="m-1"><a href="/users/Voile"><img class="w-10 h-10" title="Voile" data-tippy-content="Voile" data-tippy-placement="bottom" src="https://avatars.githubusercontent.com/u/14909989?s=100"></a></li></ul></div><div class="w-full md:w-1/3 md:pl-2 panel bg-ui-section" style="min-height: 120px;"><div id="carbonads-container"><div class="p-10px" id="_carbonad" style="min-height: 100px"><script async="" id="_carbonads_js" src="//cdn.carbonads.com/carbon.js?serve=CKYILK3L&amp;placement=codewarscom" type="text/javascript"></script><div id="carbonads"><span><span class="carbon-wrap"><a href="https://www.codewars.com/subscribe?utm_source=codewars&amp;utm_medium=carbonad" class="carbon-img" target="_blank" rel="noopener sponsored"><img src="https://fallbacks.carbonads.com/nosvn/fallbacks/88eca62e50c2ff18a69ac3d3c5228820.png" alt="ads via Carbon" border="0" height="100" width="130" style="max-width: 130px;"></a><a href="https://www.codewars.com/subscribe?utm_source=codewars&amp;utm_medium=carbonad" class="carbon-text" target="_blank" rel="noopener sponsored">Take your Codewars training to the next level.</a></span><a href="http://carbonads.net/?utm_source=codewarscom&amp;utm_medium=ad_via_link&amp;utm_campaign=in_unit&amp;utm_term=carbon" class="carbon-poweredby" target="_blank" rel="noopener sponsored">ads via Carbon</a></span></div><div class="clearfix"></div></div></div></div></div><div class="w-full panel bg-ui-section"><h3 class="mt-0">Similar Kata:</h3><div class="flex flex-col md:flex-row md:flex-wrap"><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="PHP in Action #2 - HTTP GET Method [Fundamentals]" id="57e0e52c8a8b8dfa6c0000b7"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-white-rank"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/57e0e52c8a8b8dfa6c0000b7">PHP in Action #2 - HTTP GET Method [Fundamentals]</a></div><div class="mt-1 mb-3" data-id="57e0e52c8a8b8dfa6c0000b7"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="57e0e52c8a8b8dfa6c0000b7:total_stars"></i><span data-rt="57e0e52c8a8b8dfa6c0000b7:total_stars">5</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="57e0e52c8a8b8dfa6c0000b7:total_stars"></i><span data-rt="57e0e52c8a8b8dfa6c0000b7:total_stars">5</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;57e0e52c8a8b8dfa6c0000b7&quot;,&quot;name&quot;:&quot;PHP in Action #2 - HTTP GET Method [Fundamentals]&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="57e0e52c8a8b8dfa6c0000b7:total_collections"></i><span data-rt="57e0e52c8a8b8dfa6c0000b7:total_collections">4</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 57% of users gave a positive rating out of 38 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">57% <span class="opacity-75">of</span> 38</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>106</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/57e0e52c8a8b8dfa6c0000b7/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="PHP in Action #1 - Introduction to Superglobals [Fundamentals]" id="57e0a796f5ec16a11a001c93"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-white-rank"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/57e0a796f5ec16a11a001c93">PHP in Action #1 - Introduction to Superglobals [Fundamentals]</a></div><div class="mt-1 mb-3" data-id="57e0a796f5ec16a11a001c93"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="57e0a796f5ec16a11a001c93:total_stars"></i><span data-rt="57e0a796f5ec16a11a001c93:total_stars">12</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="57e0a796f5ec16a11a001c93:total_stars"></i><span data-rt="57e0a796f5ec16a11a001c93:total_stars">12</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;57e0a796f5ec16a11a001c93&quot;,&quot;name&quot;:&quot;PHP in Action #1 - Introduction to Superglobals [Fundamentals]&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="57e0a796f5ec16a11a001c93:total_collections"></i><span data-rt="57e0a796f5ec16a11a001c93:total_collections">6</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 88% of users gave a positive rating out of 53 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">88% <span class="opacity-75">of</span> 53</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>208</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a><span class="ml-4 mr-0 text-ui-text-lc hidden sm:inline-block"><a class="mr-0" href="/kata/57e0a796f5ec16a11a001c93/discuss#label-issue"><i class="icon-moon-warning text-sm opacity-75"></i>1 Issue Reported</a></span></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/57e0a796f5ec16a11a001c93/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="PHP in Action #5 - PHPMailer Intro" id="584f6d272ddeec19bf00018a"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/584f6d272ddeec19bf00018a">PHP in Action #5 - PHPMailer Intro</a></div><div class="mt-1 mb-3" data-id="584f6d272ddeec19bf00018a"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="584f6d272ddeec19bf00018a:total_stars"></i><span data-rt="584f6d272ddeec19bf00018a:total_stars">8</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="584f6d272ddeec19bf00018a:total_stars"></i><span data-rt="584f6d272ddeec19bf00018a:total_stars">8</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;584f6d272ddeec19bf00018a&quot;,&quot;name&quot;:&quot;PHP in Action #5 - PHPMailer Intro&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="584f6d272ddeec19bf00018a:total_collections"></i><span data-rt="584f6d272ddeec19bf00018a:total_collections">4</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 94% of users gave a positive rating out of 18 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">94% <span class="opacity-75">of</span> 18</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>38</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/584f6d272ddeec19bf00018a/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Object-Oriented PHP #3 - Class Constants and Static Methods" id="579893057cb7a1be7900030d"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-white-rank"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/579893057cb7a1be7900030d">Object-Oriented PHP #3 - Class Constants and Static Methods</a></div><div class="mt-1 mb-3" data-id="579893057cb7a1be7900030d"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="579893057cb7a1be7900030d:total_stars"></i><span data-rt="579893057cb7a1be7900030d:total_stars">10</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="579893057cb7a1be7900030d:total_stars"></i><span data-rt="579893057cb7a1be7900030d:total_stars">10</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;579893057cb7a1be7900030d&quot;,&quot;name&quot;:&quot;Object-Oriented PHP #3 - Class Constants and Static Methods&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="579893057cb7a1be7900030d:total_collections"></i><span data-rt="579893057cb7a1be7900030d:total_collections">8</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 88% of users gave a positive rating out of 104 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">88% <span class="opacity-75">of</span> 104</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>632</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/579893057cb7a1be7900030d/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="PHP in Action #4 - Mailing Scripts" id="5843cc2e6312cec12a000014"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/5843cc2e6312cec12a000014">PHP in Action #4 - Mailing Scripts</a></div><div class="mt-1 mb-3" data-id="5843cc2e6312cec12a000014"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="5843cc2e6312cec12a000014:total_stars"></i><span data-rt="5843cc2e6312cec12a000014:total_stars">4</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="5843cc2e6312cec12a000014:total_stars"></i><span data-rt="5843cc2e6312cec12a000014:total_stars">4</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;5843cc2e6312cec12a000014&quot;,&quot;name&quot;:&quot;PHP in Action #4 - Mailing Scripts&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="5843cc2e6312cec12a000014:total_collections"></i><span data-rt="5843cc2e6312cec12a000014:total_collections">4</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 83% of users gave a positive rating out of 21 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">83% <span class="opacity-75">of</span> 21</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>54</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/5843cc2e6312cec12a000014/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Object-Oriented PHP #1 - Classes, Public Properties and Methods" id="579735144be912fd220001d8"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-white-rank"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/579735144be912fd220001d8">Object-Oriented PHP #1 - Classes, Public Properties and Methods</a></div><div class="mt-1 mb-3" data-id="579735144be912fd220001d8"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="579735144be912fd220001d8:total_stars"></i><span data-rt="579735144be912fd220001d8:total_stars">46</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="579735144be912fd220001d8:total_stars"></i><span data-rt="579735144be912fd220001d8:total_stars">46</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;579735144be912fd220001d8&quot;,&quot;name&quot;:&quot;Object-Oriented PHP #1 - Classes, Public Properties and Methods&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="579735144be912fd220001d8:total_collections"></i><span data-rt="579735144be912fd220001d8:total_collections">18</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 90% of users gave a positive rating out of 167 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">90% <span class="opacity-75">of</span> 167</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>839</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/579735144be912fd220001d8/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Reflection in PHP #3 - Using Reflection on Classes" id="58ca951592ce34cff500000e"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>5 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/58ca951592ce34cff500000e">Reflection in PHP #3 - Using Reflection on Classes</a></div><div class="mt-1 mb-3" data-id="58ca951592ce34cff500000e"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="58ca951592ce34cff500000e:total_stars"></i><span data-rt="58ca951592ce34cff500000e:total_stars">5</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="58ca951592ce34cff500000e:total_stars"></i><span data-rt="58ca951592ce34cff500000e:total_stars">5</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;58ca951592ce34cff500000e&quot;,&quot;name&quot;:&quot;Reflection in PHP #3 - Using Reflection on Classes&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="58ca951592ce34cff500000e:total_collections"></i><span data-rt="58ca951592ce34cff500000e:total_collections">4</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 100% of users gave a positive rating out of 26 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">100% <span class="opacity-75">of</span> 26</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>128</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/58ca951592ce34cff500000e/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Reflection in PHP #1 - Introduction" id="58c8e1c2a7f31af03600008f"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-white-rank"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/58c8e1c2a7f31af03600008f">Reflection in PHP #1 - Introduction</a></div><div class="mt-1 mb-3" data-id="58c8e1c2a7f31af03600008f"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="58c8e1c2a7f31af03600008f:total_stars"></i><span data-rt="58c8e1c2a7f31af03600008f:total_stars">11</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="58c8e1c2a7f31af03600008f:total_stars"></i><span data-rt="58c8e1c2a7f31af03600008f:total_stars">11</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;58c8e1c2a7f31af03600008f&quot;,&quot;name&quot;:&quot;Reflection in PHP #1 - Introduction&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="58c8e1c2a7f31af03600008f:total_collections"></i><span data-rt="58c8e1c2a7f31af03600008f:total_collections">10</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 95% of users gave a positive rating out of 39 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">95% <span class="opacity-75">of</span> 39</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>168</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="php" href="/kata/58c8e1c2a7f31af03600008f/train/php"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="PHP" data-tippy-placement="bottom"><i class="icon-moon-php "></i></div></a></li></ul></div></div></div></div></div></div><div class="w-full panel bg-ui-section"><h3 class="mt-0">Other Kata Authored By donaldsebleung:</h3><div class="flex flex-col md:flex-row md:flex-wrap"><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Scientific Computing in Fortran #1 - Introduction to Quaternion Algebra" id="5adf4a1488a0b7b9cb000176"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/5adf4a1488a0b7b9cb000176">Scientific Computing in Fortran #1 - Introduction to Quaternion Algebra</a></div><div class="mt-1 mb-3" data-id="5adf4a1488a0b7b9cb000176"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="5adf4a1488a0b7b9cb000176:total_stars"></i><span data-rt="5adf4a1488a0b7b9cb000176:total_stars">5</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="5adf4a1488a0b7b9cb000176:total_stars"></i><span data-rt="5adf4a1488a0b7b9cb000176:total_stars">5</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;5adf4a1488a0b7b9cb000176&quot;,&quot;name&quot;:&quot;Scientific Computing in Fortran #1 - Introduction to Quaternion Algebra&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="5adf4a1488a0b7b9cb000176:total_collections"></i><span data-rt="5adf4a1488a0b7b9cb000176:total_collections">1</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 100% of users gave a positive rating out of 7 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">100% <span class="opacity-75">of</span> 7</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>9</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="fortran" href="/kata/5adf4a1488a0b7b9cb000176/train/fortran"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="Fortran" data-tippy-placement="bottom"><i class="icon-moon-fortran "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Scientific Computing in Fortran #2 - Quaternionic Transcendental Functions" id="5afbb8cc3e9715157d00013d"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/5afbb8cc3e9715157d00013d">Scientific Computing in Fortran #2 - Quaternionic Transcendental Functions</a></div><div class="mt-1 mb-3" data-id="5afbb8cc3e9715157d00013d"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="5afbb8cc3e9715157d00013d:total_stars"></i><span data-rt="5afbb8cc3e9715157d00013d:total_stars">3</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="5afbb8cc3e9715157d00013d:total_stars"></i><span data-rt="5afbb8cc3e9715157d00013d:total_stars">3</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;5afbb8cc3e9715157d00013d&quot;,&quot;name&quot;:&quot;Scientific Computing in Fortran #2 - Quaternionic Transcendental Functions&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="5afbb8cc3e9715157d00013d:total_collections"></i><span data-rt="5afbb8cc3e9715157d00013d:total_collections">1</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 100% of users gave a positive rating out of 4 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">100% <span class="opacity-75">of</span> 4</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>5</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="fortran" href="/kata/5afbb8cc3e9715157d00013d/train/fortran"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="Fortran" data-tippy-placement="bottom"><i class="icon-moon-fortran "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Scientific Computing in Fortran #3 - Discrete Fourier Transform" id="5b07eab9abe9560de40000d3"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/5b07eab9abe9560de40000d3">Scientific Computing in Fortran #3 - Discrete Fourier Transform</a></div><div class="mt-1 mb-3" data-id="5b07eab9abe9560de40000d3"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="5b07eab9abe9560de40000d3:total_stars"></i><span data-rt="5b07eab9abe9560de40000d3:total_stars">4</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="5b07eab9abe9560de40000d3:total_stars"></i><span data-rt="5b07eab9abe9560de40000d3:total_stars">4</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;5b07eab9abe9560de40000d3&quot;,&quot;name&quot;:&quot;Scientific Computing in Fortran #3 - Discrete Fourier Transform&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="5b07eab9abe9560de40000d3:total_collections"></i><span data-rt="5b07eab9abe9560de40000d3:total_collections">1</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 100% of users gave a positive rating out of 6 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">100% <span class="opacity-75">of</span> 6</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>8</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="fortran" href="/kata/5b07eab9abe9560de40000d3/train/fortran"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="Fortran" data-tippy-placement="bottom"><i class="icon-moon-fortran "></i></div></a></li></ul></div></div></div></div><div class="items-list w-full md:w-1/2 px-2 py-1"><div class="list-item kata bg-ui-section p-4 rounded-lg shadow-md" data-title="Verified Element Index" id="5ddcfa7aaff39b0027d2c754"><div class="flex flex-col md:flex-row"><div class="px-0 w-full md:w-8/12"><div class="item-title px-0"><div class="is-inline mr-4"><div border="true" class="small-hex is-extra-wide is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div></div><div class="is-inline is-hidden js-check text-sm" data-tippy-content="You have already solved this kata" data-tippy-placement="top"><i class="icon-moon-check "></i></div><a href="/kata/5ddcfa7aaff39b0027d2c754">Verified Element Index</a></div><div class="mt-1 mb-3" data-id="5ddcfa7aaff39b0027d2c754"><a class="mr-0 js-remove-code-challenge-star is-hidden" data-tippy-content="Total times this kata has been bookmarked. Click to remove your bookmark" data-tippy-placement="bottom"><i class="icon-moon-star text-sm opacity-75" rt="5ddcfa7aaff39b0027d2c754:total_stars"></i><span data-rt="5ddcfa7aaff39b0027d2c754:total_stars">1</span></a><a class="mr-0 js-add-code-challenge-star" data-tippy-content="Total times this kata has been bookmarked. Click to bookmark" data-tippy-placement="bottom"><i class="icon-moon-star-empty text-sm opacity-75" rt="5ddcfa7aaff39b0027d2c754:total_stars"></i><span data-rt="5ddcfa7aaff39b0027d2c754:total_stars">1</span></a><a class="mr-0 js-add-to-collection ml-2" data-challenge="{&quot;id&quot;:&quot;5ddcfa7aaff39b0027d2c754&quot;,&quot;name&quot;:&quot;Verified Element Index&quot;}" data-tippy-content="Total collections this kata is a part of. Click to view and add collections." data-tippy-placement="bottom"><i class="icon-moon-collection text-sm opacity-75" rt="5ddcfa7aaff39b0027d2c754:total_collections"></i><span data-rt="5ddcfa7aaff39b0027d2c754:total_collections">1</span></a><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Satisfaction Rating: 100% of users gave a positive rating out of 5 votes. Ranked kata must be completed before they can be voted on." data-tippy-placement="bottom"><i class="icon-moon-guage text-xs opacity-75 top-0"></i><span class="mr-0">100% <span class="opacity-75">of</span> 5</span></span><span class="ml-4 mr-0 text-ui-text-lc" data-tippy-content="Total times this kata has been completed" data-tippy-placement="bottom"><i class="icon-moon-bullseye text-sm opacity-75"></i>18</span><a class="ml-4 mr-0" data-tippy-content="This kata's Sensei" data-tippy-placement="bottom" href="/users/donaldsebleung"><i class="icon-moon-user text-sm opacity-75"></i>donaldsebleung</a></div></div><div class="px-0 w-full md:w-4/12"><ul class="icon-list language-icons mt-1 mb-0"><li><a class="text-blue-400 dark:text-blue-300" data-language="coq" href="/kata/5ddcfa7aaff39b0027d2c754/train/coq"><div class="icon-container mb-3 bg-gray-200 dark:bg-k-20 rounded" data-tippy-content="Coq" data-tippy-placement="bottom"><i class="icon-moon-coq "></i></div></a></li></ul></div></div></div></div></div></div><div class="w-full panel bg-ui-section"><h3 class="mt-0">Stats:</h3><div class="flex flex-col md:flex-row md:flex-wrap"><div class="w-full md:w-1/2 px-1 py-1"><table class="w-full text-sm"><tbody class="divide-y leading-relaxed"><tr><td class="p-1">Created</td><td class="p-1 text-right">Nov 17, 2016</td></tr><tr><td class="p-1">Published</td><td class="p-1 text-right">Nov 17, 2016</td></tr><tr><td class="p-1">Warriors Trained</td><td class="p-1 text-right">218</td></tr><tr><td class="p-1">Total Skips</td><td class="p-1 text-right">23</td></tr><tr><td class="p-1">Total Code Submissions</td><td class="p-1 value text-right">1477</td></tr><tr><td class="p-1">Total Times Completed</td><td class="p-1 text-right">71</td></tr><tr><td class="p-1 pl-5">PHP Completions</td><td class="p-1 text-right">71</td></tr><tr><td class="p-1">Total Stars</td><td class="p-1 text-right">6</td></tr></tbody></table></div><div class="w-full md:w-1/2 px-1 py-1"><table class="w-full text-sm"><tbody class="divide-y leading-relaxed"><tr><td class="p-1"><i class="icon-moon-guage "></i>% of votes with a positive feedback rating<span class="ml-3" data-tippy-content="(up_votes_cast + (ok_votes_cast / 2)) / votes_cast" data-tippy-placement="bottom"><i class="icon-moon-info "></i></span></td><td class="p-1 text-right">85% of 26</td></tr><tr><td class="p-1"><i class="icon-moon-happy "></i>Total "Very Satisfied" Votes<span class="ml-3" data-tippy-content="Typically these votes count for +1, however during the beta process certain power users who have earned the privilege may have 2-4x voting power, to help kata get pushed through the beta process faster. A kata must have at least 10 votes before it can be approved." data-tippy-placement="bottom"><i class="icon-moon-info "></i></span></td><td class="p-1 text-right">21</td></tr><tr><td class="p-1"><i class="icon-moon-blankstare "></i>Total "Somewhat Satisfied" Votes<span class="ml-3" data-tippy-content="Counts as a vote of 0 but causes the total vote count to increase, affecting the satisfaction percentage. Some values may be carried over from when this vote used to be previously labeled &quot;Minor Issues&quot; during the beta process." data-tippy-placement="bottom"><i class="icon-moon-info "></i></span></td><td class="p-1 text-right">2</td></tr><tr><td class="p-1"><i class="icon-moon-sad "></i>Total "Not Satisfied" Votes<span class="ml-3" data-tippy-content="Counts as a vote of -1. Some values may be carried over from when this vote used to be previously labeled &quot;Major Issues&quot; during the beta process." data-tippy-placement="bottom"><i class="icon-moon-info "></i></span></td><td class="p-1 text-right">3</td></tr><tr><td class="p-1">Total Rank Assessments</td><td class="p-1 text-right">4</td></tr><tr><td class="p-1">Average Assessed Rank</td><td class="p-1 text-right"><div rank="-6" class="small-hex is-extra-wide float-right is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div></td></tr><tr><td class="p-1">Highest Assessed Rank</td><td class="p-1 text-right"><div rank="-6" class="small-hex is-extra-wide float-right is-yellow-rank"><div class="inner-small-hex is-extra-wide "><span>6 kyu</span></div></div></td></tr><tr><td class="p-1">Lowest Assessed Rank</td><td class="p-1 text-right"><div rank="-7" class="small-hex is-extra-wide float-right is-white-rank"><div class="inner-small-hex is-extra-wide "><span>7 kyu</span></div></div></td></tr></tbody></table></div></div></div></div><script type="application/ld+json">{
  "@context": "http://schema.org",
  "@type": "Course",
  "name": "PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]",
  "provider": {
    "@type": "Person",
    "name": "donaldsebleung"
  }
}</script></main><div class="clearfix"></div></div><div class="clearfix"></div><footer class="p-3 text-ui-text mb-0 text-center w-auto h-50px" id="main_footer"><ul class="block list-none mx-auto mb-0 p-0 overflow-hidden space-x-5"><li class="inline-block">© 2021 Codewars</li><li class="inline-block"><a href="/about">About</a></li><li class="inline-block"><a href="https://dev.codewars.com" target="_blank">API</a></li><li class="inline-block"><a href="https://blog.codewars.com" target="_blank">Blog</a></li><li class="inline-block"><a href="/about/privacy">Privacy</a></li><li class="inline-block"><a href="/about/terms-of-service">Terms</a></li><li class="inline-block"><a data-content="info@codewars.com" href="mailto:info@codewars.com" id="contactUs" rel="popover">Contact</a></li><li class="poweredby_link inline-block"><a class="hover:text-current" data-tippy-content="Supercharge your technical hiring with developer assessments." data-tippy-placement="top" href="https://www.qualified.io?utm_source=codewars&amp;utm_medium=web&amp;utm_term=footer" target="_blank"><div class="flex items-baseline justify-center"><span class="pl-1 text-xs inline-block">powered by</span><img class="h-4 inline-block dark:hidden pl-1" src="/assets/logos/qualified-black-b052752a4beaf94810c9d982f495680e2a9eb207824764ef98240ccef15cfbb1.svg"><img class="h-4 hidden dark:inline-block pl-1" src="/assets/logos/qualified-white-7cba1bde874154ee4f39d50aebd5b7e435f5b21af9884b236a60d9015039e7f0.svg"></div></a></li></ul></footer><div class="modal" id="confirm_modal" style="display: none"><div class="modal-header"><div class="close" data-dismiss="modal"><i class="icon-moon-x"></i></div><h4>Confirm</h4><div class="clearfix"></div></div><div class="clearfix"></div><div class="modal-body view"></div><div class="modal-footer"><ul class="form-actions"><li class="cancel" data-dismiss="modal"><a class="btn">Cancel</a></li><li class="alt-confirm is-hidden"><a class="btn"></a></li><li class="confirm"><a class="btn is-green"><i class="icon-general-checkmark"></i>Confirm</a></li></ul></div></div></div><div class="is-hidden" data-turbolinks-permanent="" id="template_helpers"><script id="hidden_field" type="template"><input data-bind-id="@id" data-bind-name="@name" data-bind-value="@value" type="hidden" /></script><script id="input_field" type="template"><div data-bind-class="field_class"><label data-bind-class="%required &amp;&amp; &#39;required&#39;" data-bind-for="@id" data-bind-if="%label"><abbr data-bind-if="%required" title="required">* </abbr><span data-bind-html="%label"></span></label><div data-bind-class="field_value_class"><input data-bind-id="@id" data-bind-name="@name" data-bind-type="%type || &#39;text&#39;" data-bind-value="@value | unescape_html || %defaultValue" /></div><include data-bind-each="@errors"><small data-bind-html="@"></small></include></div></script><script id="checkbox_field" type="template"><div class="boolean" data-bind-class="field_class"><div class="field_value"><div><input data-bind-name="@name" type="hidden" value="false" /><label class="checkbox"><input class="rounded bg-gray-400 dark:bg-gray-600 border-transparent focus:border-transparent focus:bg-gray-400 text-gray-700 focus:ring-1 focus:ring-offset-2 dark:ring-offset-1 focus:ring-gray-500 dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800 boolean" data-bind-checked="@value" data-bind-id="@id" data-bind-name="@name" type="checkbox" value="true" /><span data-bind-html="%label || @label"></span></label></div></div></div></script><script id="markdown_field" type="template"><div class="is-full-height" data-bind-class="field_class" data-bind-if="%style | eq::&#39;full&#39;"><div class="markdown-editor is-full-height mb-0"><div class="tabs is-full-height"><dl class="tabs is-contained bg-k-40"><dd class="is-active" data-tippy-content="Edit your message using markdown" data-tippy-placement="top"><a data-bind-html="{{%label}}" data-bind-if="%label" data-tab="markdown"></a><a data-bind-unless="%label" data-tab="markdown"><i class="icon-moon-edit "></i></a></dd><dd data-tippy-content="Preview your comment" data-tippy-placement="right"><a data-tab="preview"><i class="icon-moon-preview "></i></a></dd><dd data-tippy-content="Edit in full-screen mode" data-tippy-placement="left"><a class="js-expand"><i class="icon-moon-expand "></i></a></dd></dl><div class="clearfix"></div><ul class="tabs-content is-full-height"><li class="is-full-height is-active" data-tab="markdown"><div class="text-editor-container is-full-height"><textarea class="is-hidden" data-bind-id="@id" data-bind-name="@name" data-bind-value="@value"></textarea><div class="text-editor js-editor has-shadow"></div><div class="editor-msg-container is-hidden"><div class="alert-box"></div></div></div></li><li class="is-full-height" data-tab="preview"><div class="panel bg-ui-section is-overflow-auto"><div class="markdown prose max-w-none"><p>Your rendered <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank">github-flavored</a> markdown will appear here.</p></div></div></li></ul></div></div></div><div data-bind-class="field_class" data-bind-if="%style | ne::&#39;full&#39;"><label data-bind-class="%required &amp;&amp; &#39;required&#39;" data-bind-for="@id" data-bind-if="%label"><abbr data-bind-if="%required" title="required">* </abbr><span data-bind-html="%label"></span></label><div class="markdown-editor is-tall is-low-light" data-bind-class="%markdownEditorClass"><div class="tabs"><dl class="tabs is-contained"><dd class="is-active" data-tippy-content="Edit your message using markdown" data-tippy-placement="top"><a data-tab="markdown"><i class="icon-moon-edit "></i></a></dd><dd data-tippy-content="Preview your comment" data-tippy-placement="right"><a data-tab="preview"><i class="icon-moon-preview "></i></a></dd><dd data-tippy-content="Edit in full-screen mode" data-tippy-placement="right"><a class="js-expand"><i class="icon-moon-expand "></i></a></dd></dl><ul class="tabs-content"><li class="is-full-height is-active" data-tab="markdown"><div class="text-editor-container is-full-height"><textarea class="is-hidden" data-bind-id="@id" data-bind-name="@name" data-bind-value="@value"></textarea><div class="text-editor js-editor has-shadow"></div><div class="editor-msg-container is-hidden"><div class="alert-box"></div></div></div></li><li class="is-full-height" data-tab="preview"><div class="panel bg-ui-section is-overflow-auto"><div class="markdown prose max-w-none"><p>Your rendered <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank">github-flavored</a> markdown will appear here.</p></div></div></li></ul></div></div></div></script><script id="code_editor_field" type="template"><div class="text-editor-container" data-bind-class="field_class" data-bind-id="{{@id}}_field"><label data-bind-class="%required &amp;&amp; &#39;required&#39;" data-bind-for="@id" data-bind-if="%label"><abbr data-bind-if="%required" title="required">* </abbr><span data-bind-html="%label"></span></label><textarea class="is-hidden" data-bind-id="@id" data-bind-name="@name" data-bind-value="@value"></textarea><div class="text-editor js-editor has-shadow"></div><div class="commands-container"><ul class="is-unstyled"><li class="expand" title="Maximize Editor (esc key)"><a><i class="icon-moon-expand "></i></a></li><li class="shrink is-hidden" title="Shrink Editor (esc key)"><a><i class="icon-moon-collapse "></i></a></li></ul></div><div class="editor-msg-container is-hidden"><div class="alert-box"></div></div></div></script></div><div class="p-4 shadow-lg is-hidden" data-turbolinks-permanent="" id="collection_modal"><view><script type="template"><h3 class="mx-2 mt-2 mb-5 text-base font-bold">Collect: <span data-bind-html='@current.name'>kata</span></h3><div class="pl-2" data-bind-if="@loading"><p>Loading collection data...</p></div><div data-bind-unless="@loading"><div class="tabs" data-bind-unless="@adding"><dl class="tabs"><dd class="is-active"><a data-tab="personal"><i class="icon-moon-plus "></i>Add To My Collections</a></dd><dd data-bind-class="!@recent | hidden_class"><a data-tab="recent"><i class="icon-moon-collection "></i>Recently Collected In</a></dd></dl><ul class="tabs-content mb-0"><li class="is-active" data-tab="personal"><div class="collection-content" data-bind-if="enough_honor?"><div class="collections" data-bind-if="@collections.length"><ul><li data-bind-data-value="@id" data-bind-each="@collections"><div><h4><i class="icon-moon-collection "></i><span data-bind-text="@name"></span></h4><div class="info-row"><span><i class="icon-moon-compare "></i><span data-bind-text="{{@code_challenges | count | string}} kata"></span></span><a data-bind-href="/collections/{{@id}}"><i class="icon-moon-preview "></i>View</a></div></div><a class="btn is-dark is-red-text js-add-toggle" data-bind-if="added?">Remove</a><a class="btn is-dark is-green-text js-add-toggle" data-bind-unless="added?">Add</a></li></ul></div><div data-bind-unless="@collections.length"><h5>You have not created any collections yet.</h5><p>Collections are a way for you to organize kata so that you can
create your own training routines. Every collection you create is public and
automatically sharable with other warriors. After you have added a few kata to a
collection you and others can train on the kata contained within the collection.</p><p>Get started now by <a class="js-add">creating a new collection</a>.</p></div></div><div class="collection-content p-15px" data-bind-unless="enough_honor?">You must wait until you have earned at least 20 honor before you can create new collections.</div></li></ul></div><form class="new-collection px-10px" data-bind-if="@adding"><p>Set the name for your new collection. Remember, this is going to be visible by everyone
so think of something that others will understand.</p><input class="mt-4 block w-full rounded-none rounded-l-md sm:text-sm dark:bg-gray-800 focus:outline-none focus:ring-cgray-300 dark:focus:ring-cgray-600 focus:border-cgray-300 dark:focus:border-cgray-600 border-gray-300 dark:border-gray-700" placeholder="New Collection Name" type="text" /></form><div class="collection-footer border-t mt-5"><a class="btn is-green mr-15px js-create" data-bind-if="@adding">Create & Add</a><a class="btn js-done" data-bind-text="done_label"></a><a class="btn is-green float-right js-add" data-bind-unless="@adding || !enough_honor?">New Collection</a></div></div></script><div class="view"></div></view></div><script>document.addEventListener("turbolinks:load", (event) => {
  if (typeof gtag === "function") {
    gtag("event", "page_view", {
      page_location: event.data.url,
      page_title: document.title,
      page_path: document.location.pathname
    });
  }
  App.setup({
    env: "production",
    currentUser: JSON.parse("{}"),
    data: JSON.parse("{\"routes\":{},\"controllerName\":\"code_challenges\",\"challengeName\":\"PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]\",\"description\":\"# PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]\\n\\n## About this Kata Series\\n\\n\\\"PHP in Action\\\" is a Kata Series authored by **donaldsebleung** which is specifically aimed at novice PHP programmers who have learnt the basic syntax and features of the PHP programming language in online courses such as Codecademy but do not know how to apply it in real-world situations.  Hence, this Kata Series will focus on the practical aspects of PHP such as sending emails, form validation and setting cookies.\\n\\nThis Kata Series assumes that you have already learnt the fundamentals of PHP such as data types (e.g. strings, numbers, booleans), functions and basic OOP.  A good indicator that you are ready for this Kata Series is if you can complete [Multiply (8kyu) in PHP](https://www.codewars.com/kata/multiply/train/php) **and** the first four Kata in my [Object-Oriented PHP](https://www.codewars.com/collections/object-oriented-php) Series without hesitation and without referring to external sources in the process.  Since real-world PHP is commonly used in conjunction with **HTML and CSS** (and sometimes even **Javascript**), you will also be expected to have a basic understanding of the following programming languages.  In certain Kata in this Series where form validation is involved, you may also be expected to be familiar with HTML forms, what attributes they have and how they work.\\n\\n## Lesson\\n\\nLast lesson, we learned that when your browser sends a request to the server containing the webpage files, it uses the `GET` method by default, unless the request was made when an HTML form with the attribute `method=\\\"post\\\"` was submitted, in which case the `POST` method is used instead.  We also learned that we could detect which method was used in the web request in PHP by accessing the `\\\"REQUEST_METHOD\\\"` key of the `$_SERVER` superglobal, which is an associative array.\\n\\nThis lesson, we will learn the basics of handling submitted form data via the HTTP POST method.\\n\\n### A Simple Example\\n\\nBefore we start, you may remember from last lesson that it was possible to pass in URL parameters in the following format: `http://somewebsite.tld/path/to/the/php_file.php?param1=somevalue\\u0026param2=someothervalue\\u0026param3=yetsomeothervalue`, where `?` is the delimiter between the actual URL and the URL parameters and `\\u0026` is the delimiter between different key/value pairs within the URL parameters.  The URL parameters can then be accessed as key/value pairs in the **superglobal** associative array called `$_GET`.  Similarly, form data submitted through a form with attribute `method=\\\"post\\\"` can be accessed as **key/value pairs** in the **superglobal** associative array called `$_POST`, where the **key** is the `name` attribute of a particular input field and the **value** is what the user entered into that particular input field.  Below is a possible (*purely fictional*) real-world example:\\n\\nTimmy is an enthusiastic PHP Developer who wants as many people in the world as possible to learn how to code in PHP, so he has recently decided to start an online service called **PHPWars** where PHP developers can train on PHP coding exercises and improve upon their PHP coding skills.  However, since **PHPWars** is quite a large project, it is estimated that it will take at least a few months before he can finally get the service live.  In order to prevent his potential customers from forgetting about or losing interest in his online project in this time period, he has created an online HTML form on his website so anyone who may be interested in his project can enter their personal details and email address.  When the form is submitted, the personal details and email address the customer entered is saved in a database so in the near future, when his project is near completion, he can use his website to automatically send emails to his potential customers to remind them that **PHPWars** is about to go live.  The HTML code he used for his signup form is as follows:\\n\\n```php\\n\\u003ch2\\u003eGet Notifications on PHPWars\\u003csup\\u003eTM\\u003c/sup\\u003e\\u003c/h2\\u003e\\n\\u003cform action=\\\"\\u003c?php echo htmlspecialchars($_SERVER[\\\"PHP_SELF\\\"]); ?\\u003e\\\" method=\\\"post\\\"\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"text\\\" name=\\\"name\\\" placeholder=\\\"Full Name\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"text\\\" name=\\\"age\\\" placeholder=\\\"Age\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email Address\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"submit\\\" value=\\\"Sign Up\\\" /\\u003e\\n  \\u003c/p\\u003e\\n\\u003c/form\\u003e\\n```\\n\\n... and the form looks something like this:\\n\\n![PHPWars Signup Form](https://i.imgur.com/z4ujvkN.png)\\n\\nFirstly, below the `\\u003ch2\\u003e` tags, notice that the opening `\\u003cform\\u003e` tag has *two* attributes: `action` and `method`.  As mentioned before, the `method` attribute specifies the method that your browser sends a request to the server containing the webpage files as the form is being submitted, which in this case (and most other cases) is `\\\"post\\\"`.  This means that when the form is submitted, the form data can be accessed as key/value pairs in the `$_POST` superglobal and **not** the `$_GET` superglobal.  The POST method is most often used with HTML forms because it has a number of advantages compared to GET: it does not show the submitted information in the URL (which can pose a security issue especially when sensitive information such as passwords are involved) and there is no limit as to how much form data the POST method can hold (there is a limit as to how much data you can cram into an URL via URL parameters with the GET method which is summarised [here on W3Schools](http://www.w3schools.com/tags/ref_httpmethods.asp)).  One of the few exceptions to this rule is when creating a search form where you can safely set the `method` attribute to `\\\"get\\\"` as the search keywords entered into the search form is not sensitive data (and is usually short enough that the GET data restriction has virtually no effect on the query).\\n\\nAs for the `action` attribute of the HTML form, notice that we have PHP code inserted within that attribute, surrounded by PHP script tags (`\\u003c?php` and `?\\u003e`).  If you read the PHP code inside those script tags carefully, you will see an `echo` statement which basically means text is being dynamically printed out into that attribute.  You may also notice that what is being printed out looks a little bit weird: `htmlspecialchars($_SERVER[\\\"PHP_SELF\\\"])`.  If you don't freak out by that weird-looking code and take a closer look, you will see that it is simply the value `$_SERVER[\\\"PHP_SELF\\\"]` passed into a function called `htmlspecialchars()`.  As you may remember from previous lessons, the `$_SERVER` variable is yet another one of the few **superglobals** predefined in PHP.  The `$_SERVER` superglobal contains a key called `\\\"PHP_SELF\\\"` which basically contains the **relative URL** of the current webpage file.  For example, let's say that Timmy's website is located at `http://phpwars.com` and the current PHP file containing this HTML form is a file called `index.php` located at the root directory of the website.  `$_SERVER[\\\"PHP_SELF\\\"]` will then be equal to the relative URL `\\\"/index.php\\\"` in that particular PHP file.  What `$_SERVER[\\\"PHP_SELF\\\"]` essentially does in this case is that it will always set the `action` attribute of the HTML form equal to the path to the current PHP file/script so that when the form is submitted, the form data will **always** be submitted back into the same page wherever the current PHP script is located.  This in turn means that the `action` attribute of the HTML form will always be a valid URL no matter where this PHP script and HTML form is placed in the website.\\n\\nNext, take a look at the **first three** `\\u003cinput\\u003e` tags.  You will notice that each of them has exactly three attributes, `type`, `name` and `placeholder`.  The `type` attribute of an `\\u003cinput\\u003e` field specifies the type of form data that goes into each field.  In the case of the full name and age of the customer, the type of form data entered into those fields would naturally be plain `\\\"text\\\"` as there is nothing special about the importance and/or format of a person's name and/or age.  As for the email field, Timmy *could* also have used a plaintext field (`type=\\\"text\\\"`) to record the email address but HTML forms also specifically support an `\\\"email\\\"` data type which allows for some degree of input validation in the form itself (in *some* browsers only) before the form data in that field is actually passed into the PHP code.  Other possible types of input types include `\\\"password\\\"` (which masks all the characters in identical black dots) and `\\\"radio\\\"` (where you select exactly one choice out of many).\\n\\nAnother attribute you would have noticed is the `placeholder` attribute which is essentially the grey text displayed to the user inside the input fields when they are empty in order to show the user what input is expected.\\n\\nHowever, the **most important** attribute of an `\\u003cinput\\u003e` field which makes each input field unique is its `name` attribute.  As you can see, the first input field has a name of `\\\"name\\\"`, the second one `\\\"age\\\"` and the third one `\\\"email\\\"`.  The `name` attribute is especially important because it is used as the **key** in the key/value pairs found in the `$_POST` superglobal when the form data is submitted.  Let's say we have a user, John Doe, for example, and he has typed in the following data into the signup form before pressing the \\\"Sign Up\\\" button:\\n\\n![John Doe's Credentials on the PHPWars Signup Form](https://i.imgur.com/V3szTmr.png)\\n\\nThe following would then hold true **once John submits the form by pressing on the \\\"Sign Up\\\" button**:\\n\\n```php\\n$_POST[\\\"name\\\"] === \\\"John Doe\\\";\\n$_POST[\\\"age\\\"] === \\\"25\\\";\\n$_POST[\\\"email\\\"] === \\\"johndoe@example.tld\\\";\\n```\\n\\n**Note that form data submitted by a user are ALWAYS strings.  Even if users entered a number (like in the age field above), the corresponding form data is received as a STRING, not a number.  Keep that in mind when manipulating form data.**\\n\\nTimmy can then validate, sanitize and manipulate the form data in his PHP script as he wishes.  In this case he would probably want to enter and save the form data in his database so he can send automated emails in the near future.\\n\\nReturning back to the HTML form, you may have wondered where the \\\"Sign Up\\\" button came from and whether it automatically appeared every time you use the `\\u003cform\\u003e` tags.  If you are clever enough, you would have noticed that there is fourth `\\u003cinput\\u003e` field with only *two* attributes instead of three.  That's right, the \\\"Submit\\\" (or signup) button is treated as an `\\u003cinput\\u003e` field.  As you can see, its `type` attribute is set to `\\\"submit\\\"` indicating that it is the button to be pressed in order to **submit the form data**.  Note that a submit button does **not** have a `name` attribute as its sole purpose is to submit the form data to the target URL specified by the `action` attribute of the form itself and therefore does not hold any form data in and of itself.  It also does not have a `placeholder` attribute as nothing is entered into a Submit (or signup) button so no placeholder text has to be displayed to the user to tell them what to enter.  However, it does have a `value` attribute which specifies what the button should read.  In this case the `value` attribute is set to `\\\"Sign Up\\\"` so in the screenshots above you can see that the text on the submit button reads \\\"Sign Up\\\".  Note that the `value` attribute of the Submit button is *optional*, if it is omitted, the Submit button reads exactly \\\"Submit\\\" by default.\\n\\nBefore we move on to the actual Task, I would like to walk you through a worked example of a functioning contact form and its corresponding PHP script, complete with input validation and sanitation so you can get a feel of how it actually works in the real world.  If you have a local server installed in your computer, you may want to boot that up and create a new PHP file to follow the worked example which I will guide you through now.\\n\\n### Worked Example: A simple contact form for your website\\n\\nSuppose you have a personal website (or maybe you actually do!) that uses PHP as its server-side language.  You would like to create a simple, minimal contact form at the homepage of your website so your visitors can send you email messages directly through your website.\\n\\nBefore we start writing our PHP code, we should first formulate our actual HTML form:\\n\\n```html\\n\\u003cform action=\\\"\\u003c?php echo htmlspecialchars($_SERVER[\\\"PHP_SELF\\\"]); ?\\u003e\\\" method=\\\"post\\\"\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"text\\\" name=\\\"name\\\" placeholder=\\\"Name\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Email\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003ctextarea name=\\\"message\\\" placeholder=\\\"Message\\\"\\u003e\\u003c/textarea\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"submit\\\" value=\\\"Send Message\\\" /\\u003e\\n  \\u003c/p\\u003e\\n\\u003c/form\\u003e\\n```\\n\\n![Worked Example - Contact Form](https://i.imgur.com/l7y3Wqq.png)\\n\\nBy now you should be aware what all of the attributes (and the embedded PHP code) in the `\\u003cform\\u003e` and `\\u003cinput\\u003e` tags mean and do; if you do not, please scroll back up to the section \\\"A Simple Example\\\" and re-read it until you understand what is going on.  It is especially important that you know the *exact* roles of the embedded PHP script in the `action` attribute of the form itself and the `name` attributes of each `\\u003cinput\\u003e` field.\\n\\nYou will also notice a new form element in this worked example: the `\\u003ctextarea\\u003e` field.  The `\\u003ctextarea\\u003e` field is very similar to the `\\u003cinput\\u003e` field in a lot of ways except it is specifically designed to receive (and display) more text, such as an entire paragraph or essay, where the `\\u003cinput\\u003e` field will not display all the typed text properly.  As you can see, the `\\u003ctextarea\\u003e` tag also has the same attributes as an `\\u003cinput\\u003e` tag: it has an input `type` which is text (as an email message is essentially that), a `name` of `\\\"message\\\"` (which will be the **key** of a key/value pair in the `$_POST` superglobal *once the form is submitted*) and a `placeholder` of `\\\"Message\\\"`.  If you are comfortable with the HTML form, we will now move on to the actual PHP code to handle this.\\n\\nWhile you may want to use the form data to send the email to your email address straight away, you must always bear in mind that the visitor may not always land on your page with the contact form by submitting the HTML form, *especially since the page containing the form and receiving the form data is one and the same*.  If the visitor lands on your page handling the form data without submitting the form beforehand, the `$_POST` superglobal will not contain the keys `\\\"name\\\"`, `\\\"email\\\"` and `\\\"message\\\"` so when you try to access them directly from the `$_POST` superglobal (like such, e.g. `$_POST[\\\"message\\\"]`), an Error or Exception of some type will be thrown which will immediately terminate your entire PHP script, causing display problems to the visitor and more.  In order to prevent this from happening, you must always first check whether the form was submitted in the first place by checking the value of `$_SERVER[\\\"REQUEST_METHOD\\\"]`.  Inside your `\\u003c?php` `?\\u003e` script tags, type in the following PHP code:\\n\\n```php\\nif ($_SERVER[\\\"REQUEST_METHOD\\\"] === \\\"POST\\\") {\\n  \\n}\\n```\\n\\nBy then placing all your form data-handling code inside this conditional statement, you ensure that you will not accidentally access a non-existent key in the `$_POST` superglobal and cause an uncaught Error/Exception.\\n\\nNext off, note that the name of the visitor and/or his/her message to you may contain any combination of characters (or you *could* restrict the name of the visitor to alphanumeric characters only by using a **regex test** but we will not cover that in this lesson), *but* an email address will always ever be in a particular format.  For example, `johndoe@example.tld` is a valid email address and `abcslj934()*/:\\u003c\\u003e` is not.  To ensure that the email address the visitor provided is actually valid, you must first **validate** it either by using your own regex test (which I will not cover), **or** you can use certain built-in functions and filters in PHP to achieve the same thing.\\n\\nEnter `filter_var()`!  This built-in PHP function accepts **two** arguments, the first in which is the actual input (which in this case would be the user-entered email address, `$_POST[\\\"email\\\"]`) and the second in which is the type of filter to be used to validate a particular type of input.  In this case, we would use the `FILTER_VALIDATE_EMAIL` filter in order to confirm that the entered email address is actually valid.  If it is invalid, we do **not** process the rest of the form data and instead print out an error message to the visitor telling him/her that the message was not sent:\\n\\n```php\\nif ($_SERVER[\\\"REQUEST_METHOD\\\"] === \\\"POST\\\") {\\n  if (!filter_var($_POST[\\\"email\\\"], FILTER_VALIDATE_EMAIL)) {\\n    echo \\\"\\u003cp\\u003e\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eSorry, the email address you provided is not valid so the message was not sent.\\u003c/span\\u003e\\u003c/p\\u003e\\\";\\n  } else {\\n    \\n  }\\n}\\n```\\n\\nThe `filter_var()` function returns a **boolean** depending on whether the input is of a particular type (validated against a built-in **filter** constant).  If the tested input is valid (in this case, if the email address is valid), `filter_var()` returns `true` and `false` otherwise.  So the new conditional we just added is essentially saying, \\\"If the email address provided is not valid, `echo` some colored HTML telling the visitor that their email is not valid and so their message was not sent.\\\"  For example, if the following was typed into our contact form:\\n\\n![Invalid Email Address in Contact Form](https://i.imgur.com/5O1JBwW.png)\\n\\nOnce the form is submitted, the following red text would appear:\\n\\n![Invalid Email Address Message](https://i.imgur.com/Forpnc3.png)\\n\\nIf the email address is valid, we must still check whether the visitor has left the `\\\"name\\\"` and/or `\\\"message\\\"` fields empty.  We certainly don't want spammers sending loads of empty emails with no name to our email account!  The built-in `empty()` function in PHP receives a single argument which is the input data and checks if it is empty (i.e. an empty string):\\n\\n```php\\nif ($_SERVER[\\\"REQUEST_METHOD\\\"] === \\\"POST\\\") {\\n  if (!filter_var($_POST[\\\"email\\\"], FILTER_VALIDATE_EMAIL)) {\\n    echo \\\"\\u003cp\\u003e\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eSorry, the email address you provided is not valid so the message was not sent.\\u003c/span\\u003e\\u003c/p\\u003e\\\";\\n  } else {\\n    if (empty($_POST[\\\"name\\\"]) || empty($_POST[\\\"message\\\"])) {\\n      echo \\\"\\u003cp\\u003e\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eSorry, the name and message fields are required.  The message was not sent.\\u003c/span\\u003e\\u003c/p\\u003e\\\";\\n    } else {\\n      \\n    }\\n  }\\n}\\n```\\n\\nAgain, the `empty()` function returns a boolean, `true` if the tested input is empty and `false` otherwise.  If it is indeed empty, we print out another red message to tell the user what's wrong.\\n\\n![Name and Message Fields not filled in](https://i.imgur.com/sv2iPnB.png)\\n\\n![Corresponding Error Message for empty name/message fields](https://i.imgur.com/4LeSE80.png)\\n\\nNow that we've confirmed that the name and message fields are not empty and that the email address is valid, we can then proceed to **sanitize** our form data:\\n\\n```php\\nif ($_SERVER[\\\"REQUEST_METHOD\\\"] === \\\"POST\\\") {\\n  if (!filter_var($_POST[\\\"email\\\"], FILTER_VALIDATE_EMAIL)) {\\n    echo \\\"\\u003cp\\u003e\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eSorry, the email address you provided is not valid so the message was not sent.\\u003c/span\\u003e\\u003c/p\\u003e\\\";\\n  } else {\\n    if (empty($_POST[\\\"name\\\"]) || empty($_POST[\\\"message\\\"])) {\\n      echo \\\"\\u003cp\\u003e\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eSorry, the name and message fields are required.  The message was not sent.\\u003c/span\\u003e\\u003c/p\\u003e\\\";\\n    } else {\\n      $name = $_POST[\\\"name\\\"];\\n      $email = $_POST[\\\"email\\\"];\\n      $message = $_POST[\\\"message\\\"];\\n\\n      $name = trim($name);\\n      $name = stripslashes($name);\\n      $name = htmlspecialchars($name);\\n\\n      $email = trim($email);\\n      $email = stripslashes($email);\\n      $email = htmlspecialchars($email);\\n\\n      $message = trim($message);\\n      $message = stripslashes($message);\\n      $message = htmlspecialchars($message);\\n    }\\n  }\\n}\\n```\\n\\nWe have saved the `name`, `email` and `message` received from the form data in the global variables `$name`, `$email` and `$message` before modifying the **global variables** and not the form data itself as it is always a good practice to leave the actual form data as it is.  We then proceeded to sanitize `$name`, `$email` and `$message` respectively by using the three functions `htmlspecialchars()`, `stripslashes()` and `trim()`.  You will have come across `htmlspecialchars()` in previous lessons before, but the `trim()` function removes leading and trailing whitespace characters (including newlines and tabs etc.) and the `stripslashes()` function [unquotes a quoted string](http://php.net/manual/en/function.stripslashes.php) (whatever that means).  Of all, the most important data sanitation function is `htmlspecialchars()` as it can help prevent Cross-Site Scripting (XSS) which should already be mentioned in previous lessons.  If you aren't aware of it, you can search it up on W3Schools and they give quite a thorough explanation what that exactly is.\\n\\nThere are also certain other methods of input sanitation.  For example, if you are using the form data to enter information into a database using SQL, you would need to implement some sort of regex test to ensure that the input data does not contain certain SQL key words so [SQL Injection](http://www.w3schools.com/Sql/sql_injection.asp) cannot take place.\\n\\nNow that your form data is properly sanitized, you can do whatever you want with it.  You would want to send the form data to your email address using `mail()` (which will be covered in future lessons) but for now let's just display to the user what they have entered into the form itself:\\n\\n```php\\nif ($_SERVER[\\\"REQUEST_METHOD\\\"] === \\\"POST\\\") {\\n  if (!filter_var($_POST[\\\"email\\\"], FILTER_VALIDATE_EMAIL)) {\\n    echo \\\"\\u003cp\\u003e\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eSorry, the email address you provided is not valid so the message was not sent.\\u003c/span\\u003e\\u003c/p\\u003e\\\";\\n  } else {\\n    if (empty($_POST[\\\"name\\\"]) || empty($_POST[\\\"message\\\"])) {\\n      echo \\\"\\u003cp\\u003e\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eSorry, the name and message fields are required.  The message was not sent.\\u003c/span\\u003e\\u003c/p\\u003e\\\";\\n    } else {\\n      $name = $_POST[\\\"name\\\"];\\n      $email = $_POST[\\\"email\\\"];\\n      $message = $_POST[\\\"message\\\"];\\n\\n      $name = trim($name);\\n      $name = stripslashes($name);\\n      $name = htmlspecialchars($name);\\n\\n      $email = trim($email);\\n      $email = stripslashes($email);\\n      $email = htmlspecialchars($email);\\n\\n      $message = trim($message);\\n      $message = stripslashes($message);\\n      $message = htmlspecialchars($message);\\n\\n      // Display the sanitized form data to the user\\n      echo \\\"\\u003cp\\u003eYour Name: $name\\u003c/p\\u003e\\\";\\n      echo \\\"\\u003cp\\u003eYour Email Address: $email\\u003c/p\\u003e\\\";\\n      echo \\\"\\u003cp\\u003eYour Message: $message\\u003c/p\\u003e\\\";\\n    }\\n  }\\n}\\n```\\n\\nAnd ... tada!  Your contact form is \\\"complete\\\" :D (well, not really as an email isn't sent, but at least you got this far!)\\n\\n![Contact Form with Full Details](https://i.imgur.com/muyLp7S.png)\\n\\n![Sanitized Form Data Shown](https://i.imgur.com/Vsc2Wg3.png)\\n\\n*(Whoops, just realised that the provided name and the name used in the actual message body do not match up but whatever :p)*\\n\\nTherefore, to summarize, whenever you want to use a PHP script to handle form data, **always** do the following **in order**:\\n\\n1. Make sure that the user landed on your PHP script that handles the form data **by actually submitting the form and not simply visiting it** - if that is not the case, prepare an error message and **do not attempt to access the (nonexistent) form data**\\n2. **Validate** all of your form input - make sure that all of the form data is in the correct format\\n3. **Sanitize** all of your form input - you don't want hackers injecting malicious JavaScript code into your website\\n4. Finally, when the form data is safe, you can manipulate the form data as you wish.\\n\\n## Task\\n\\n*Note: The lesson provided in this Kata is designed to teach you most, if not all, of the key concepts required to complete the Task in this Kata.  However, if in doubt, you are strongly encouraged to conduct your own research.*\\n\\n### Warm-Up Exercise\\n\\nBefore we start writing an actual script to handle the form data, let's first see if you actually understand how POST data works.\\n\\nUsing the HTML form defined in the section \\\"Worked Example: A simple contact form for your website\\\", **set the correct key/value pairs in the** `$_POST` **superglobal** provided that the data shown in the screenshot is submitted:\\n\\n![Screenshot for Warm Up Exercise](https://i.imgur.com/N3sWfKv.png)\\n\\n**Note that in real life, you would almost NEVER directly assign key/value pairs to the** `$_POST` **superglobal using your PHP script as the whole purpose of that superglobal is to allow you to collect form data.  This warm-up exercise is just to test your understanding on what key/value pairs are created when a given HTML form is submitted.**\\n\\n### Form Data-Handling Script\\n\\nYou have recently authored an entire Kata Series on Codewars and would like to use an HTML form to collect feedback from your fellow codewarriors.  The HTML code for the form is as follows:\\n\\n```html\\n\\u003cform action=\\\"\\u003c?php echo htmlspecialchars($_SERVER[\\\"PHP_SELF\\\"]); ?\\u003e\\\" method=\\\"post\\\"\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"text\\\" name=\\\"name\\\" placeholder=\\\"Your Name\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"text\\\" name=\\\"age\\\" placeholder=\\\"Your Age\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"Your Email Address\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"text\\\" name=\\\"rating\\\" placeholder=\\\"Rate out of 10\\\" /\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    What did you like about this Kata Series?\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003ctextarea name=\\\"compliments\\\"\\u003e\\u003c/textarea\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    What could be improved about this Kata Series?\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003ctextarea name=\\\"criticism\\\"\\u003e\\u003c/textarea\\u003e\\n  \\u003c/p\\u003e\\n  \\u003cp\\u003e\\n    \\u003cinput type=\\\"submit\\\" /\\u003e\\n  \\u003c/p\\u003e\\n\\u003c/form\\u003e\\n```\\n\\nIts appearance is shown in the screenshot below:\\n\\n![Form Data-Handling Script HTML Form Appearance](https://i.imgur.com/mtkEo2S.png)\\n\\nInside the `user_script()` function, write a PHP script that does the following:\\n\\n1. Make sure that the visitor landed on this PHP script by a form submission - if that is not the case, do NOT attempt to do anything!  This should be achieved by using a suitable *conditional statement* as shown in the lesson.\\n2. Using a suitable built-in PHP function or otherwise, check that the visitor actually entered *something* in the `\\\"name\\\"` field of the feedback form.  If the visitor left that input field blank, `echo` the following string as shown: `\\\"\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eName field is required\\u003c/span\\u003e\\\"`\\n3. Now check if the visitor provided a valid age.  For the purposes of this Kata, there is no limit to the magnitude of a person's age, nor do you need to check whether the input age is positive or negative; however, you **must** ensure that the input age is **numeric** using a built-in PHP function or otherwise.  If the input age is not numeric, `echo` the following message: `\\\"\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eInvalid Age provided\\u003c/span\\u003e\\\"`\\n4. Make sure the visitor provided a valid email address, using built-in PHP functions and filters or otherwise.  If the email provided is invalid or empty `echo` the string: `\\\"\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eEmail Address is Invalid\\u003c/span\\u003e\\\"`\\n5. Make sure the rating that the user provided is an integer in the range `1` to `10` (both inclusive).  However, note that POST data is **always** in the form of a string, so keep that in mind when validating the rating.  If the rating is invalid, output the string `\\\"\\u003cspan style=\\\\\\\"color: red\\\\\\\"\\u003eRating is invalid, please provide a number from 1 to 10\\u003c/span\\u003e\\\"`\\n6. It has been decided that the last two fields of the feedback form are optional so you do **not** need to ensure that they are not empty.  Now that you have thoroughly validated the form input, it is time to properly sanitize the form input.  First save each piece of form data into a **global** variable with the exact same name as the `name` attributes of each input field (including the `\\u003ctextarea\\u003e`s).  For example, if there is a `\\u003ctextarea\\u003e` or `\\u003cinput\\u003e` with `name=\\\"example\\\"`, the value of that form data should be stored into a global variable called `$example`.  Then pass each global variable into the sanitation functions `trim()`, `stripslashes()` and `htmlspecialchars()` respectively and assign the sanitized value back into each global variable.\\n\\nYou may now do whatever you like with the form input!  You may choose to print it back out to the visitor, use it to send an email, save it in a database, etc.  Note that this will **not** be tested for the purposes of this Kata.\\n\\n## Kata in this Series\\n\\n1. [PHP in Action #1 - Introduction to Superglobals [Fundamentals]](https://www.codewars.com/kata/php-in-action-number-1-introduction-to-superglobals-fundamentals)\\n2. [PHP in Action #2 - HTTP GET Method [Fundamentals]](https://www.codewars.com/kata/php-in-action-number-2-http-get-method-fundamentals)\\n3. **PHP in Action #3 - HTTP POST Method, Input Sanitation and Input Validation [Fundamentals]**\\n4. [PHP in Action #4 - Mailing Scripts](https://www.codewars.com/kata/php-in-action-number-4-mailing-scripts)\\n5. [PHP in Action #5 - PHPMailer Intro](https://www.codewars.com/kata/584f6d272ddeec19bf00018a)\\n\\n## You May Also Like\\n\\n- [Object-Oriented PHP](https://www.codewars.com/collections/object-oriented-php)\\n- [PHP Functions](https://www.codewars.com/collections/php-functions)\\n- [Reflection in PHP](https://www.codewars.com/collections/reflection-in-php)\",\"activeLanguage\":\"php\"}"),
    routes: {},
    pageControllerName: 'CodeChallenges.ShowController',
    ablyKey: "scNMAQ.WPB3NQ:wcqqMD8xujGV8lHt",
    privateChannelName: "_xMjMA",
  });
}, { once: true });</script><script>document.addEventListener("turbolinks:load", (event) => {
  if (typeof Intercom === "function" && Intercom.booted) Intercom("shutdown");
}, { once: true });</script></body></html>